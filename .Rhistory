# Plot.
p1 <- ggplot(data = tfl_bus_buf_sf) +
geom_sf(mapping = aes(fill = crimes), colour = "transparent") +
sscale_fill_brewer(palette = "reds")
p2 <- ggplot(data = osm_bus_buf_sf) +
geom_sf(mapping = aes(fill = crimes), colour = "transparent")
plot_grid(p1, p2, ncol = 2)
# Plot.
p1 <- ggplot(data = tfl_bus_buf_sf) +
geom_sf(mapping = aes(fill = crimes), colour = "transparent") +
sscale_fill_brewer(palette = "reds")
p2 <- ggplot(data = osm_bus_buf_sf) +
geom_sf(mapping = aes(fill = crimes), colour = "transparent")
plot_grid(p1, p2, ncol = 2)
# Plot.
p1 <- ggplot(data = tfl_bus_buf_sf) +
geom_sf(mapping = aes(fill = crimes), colour = "transparent") +
scale_fill_continuous("Reds")
p2 <- ggplot(data = osm_bus_buf_sf) +
geom_sf(mapping = aes(fill = crimes), colour = "transparent")
plot_grid(p1, p2, ncol = 2)
# Plot.
p1 <- ggplot(data = tfl_bus_buf_sf) +
geom_sf(mapping = aes(fill = crimes), colour = "transparent") +
scale_fill_brewer("Reds")
p2 <- ggplot(data = osm_bus_buf_sf) +
geom_sf(mapping = aes(fill = crimes), colour = "transparent")
plot_grid(p1, p2, ncol = 2)
# Plot.
p1 <- ggplot(data = tfl_bus_buf_sf) +
geom_sf(mapping = aes(fill = crimes), colour = "transparent") +
scale_fill_viridis_c()
p2 <- ggplot(data = osm_bus_buf_sf) +
geom_sf(mapping = aes(fill = crimes), colour = "transparent")
plot_grid(p1, p2, ncol = 2)
p1 <- ggplot(data = tfl_bus_buf_sf) +
geom_sf(mapping = aes(fill = crimes), colour = "transparent") +
scale_fill_viridis_c() +
theme_minimal()
p2 <- ggplot(data = osm_bus_buf_sf) +
geom_sf(mapping = aes(fill = crimes), colour = "transparent") +
scale_fill_viridis_c() +
theme_minimal()
plot_grid(p1, p2, ncol = 2)
p1 <- ggplot(data = tfl_bus_buf_sf) +
geom_sf(mapping = aes(fill = crimes), colour = "transparent") +
scale_fill_viridis_c() +
theme_minimal()
p2 <- ggplot(data = osm_bus_buf_sf) +
geom_sf(mapping = aes(fill = crimes), colour = "transparent") +
scale_fill_viridis_c() +
theme_minimal()
plot_grid(p1, p2, ncol = 2)
p1 <- ggplot(data = tfl_bus_buf_sf) +
geom_sf(mapping = aes(fill = crimes), colour = "transparent") +
scale_fill_viridis_c() +
theme_minimal()
p2 <- ggplot(data = osm_bus_buf_sf) +
geom_sf(mapping = aes(fill = crimes), colour = "transparent") +
scale_fill_viridis_c() +
theme_minimal()
plot_grid(p1, p2, ncol = 2)
library(jsonlite)
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(dplyr)
library(tidyr)
library(purrr)
library(cowplot) # maybe don't show?
# OSM query ==============================================================================================
# All queries begin with a bounding box specification i.e. the study region.
# This can be obtained manually, which requires some existing knowledge about
# an area using the latitude and longitude coordinates, but it is generally
# easier to use a search term. For instance
bb_sf <- getbb(place_name = "greater london united kingdom", format_out = "sf_polygon")
osm_bus_sf <- opq(bbox = bb_sf) %>%                                    # select bounding box
add_osm_feature(key = 'highway', value = 'bus_stop') %>% # select features
osmdata_sf() %>%                                         # specify class (sf or sp)
trim_osmdata(bb_poly = bb_sf)
osm_bus_sf
osm_bus_sf <- osm_bus_sf$osm_points # extract point only
osm_bus_sf <- st_transform(osm_bus_sf, 27700)
bb_sf      <- st_transform(bb_sf, 27700)
ggplot() +
geom_sf(data = bb_sf) +
geom_sf(data = osm_bus_sf, size = 0.3)
# TfL scrape ==============================================================================================
# Scape bus stops on route 24 from TfL. Warning is fine.
api_call <- fromJSON(readLines("https://api.tfl.gov.uk/line/91/route/sequence/outbound"))
# Extract bus stop names and the lat-long coordinates, transform to BNG.
tfl_bus91_df <- api_call %>%
pluck("stations") %>%
select(name, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
# Check names.
osm_bus91_sf <- osm_bus_sf %>%
filter(name %in% tfl_bus91_df$name)
# Plot difference.
ggplot() +
geom_sf(data = tfl_bus91_df, size = 2) +
geom_sf(data = osm_bus91_sf, col = "red", alpha = 0.5) +
theme_minimal()
# Keep only one of the OSM records. This is a scenario where we don't have the 'real' alternative.
osm_bus91_dup_sf <- osm_bus91_sf %>%
group_by(name) %>%
slice(1) %>%
ungroup()
# Plot difference.
ggplot() +
geom_sf(data = tfl_bus91_df, size = 2) +
geom_sf(data = osm_bus91_dup_sf, col = "red", alpha = 0.8) +
theme_minimal()
# Load crime data.
crime_df <- read_csv("data/2020-01-metropolitan-street.csv")
# Make spatial.
crime_sf <- crime_df %>%
drop_na(Latitude, Longitude) %>%
st_as_sf(coords = c(x = "Longitude", y = "Latitude"), crs = 4326) %>%
st_transform(27700)
# Create buffers around each bus stop.
osm_bus_buf_sf <- st_buffer(osm_bus91_dup_sf, 70)
tfl_bus_buf_sf <- st_buffer(tfl_bus91_df, 70)
# Aggregate for each.
osm_bus_buf_sf <- osm_bus_buf_sf %>%
mutate(crimes = lengths(st_intersects(osm_bus_buf_sf, crime_sf)))
tfl_bus_buf_sf <- tfl_bus_buf_sf %>%
mutate(crimes = lengths(st_intersects(tfl_bus_buf_sf, crime_sf)))
# Frequencies.
table(osm_bus_buf_sf$crimes)
table(tfl_bus_buf_sf$crimes)
# Plot.
p1 <- ggplot(data = tfl_bus_buf_sf) +
geom_sf(mapping = aes(fill = crimes), colour = "transparent") +
scale_fill_viridis_c() +
theme_minimal()
p2 <- ggplot(data = osm_bus_buf_sf) +
geom_sf(mapping = aes(fill = crimes), colour = "transparent") +
scale_fill_viridis_c() +
theme_minimal()
plot_grid(p1, p2, ncol = 2)
# Frequencies.
plot(table(osm_bus_buf_sf$crimes))
# Frequencies.
ggplot(data = tfl_bus_buf_sf) + geom_histogram(mapping = aes(x = crimes))
ggplot(data = osm_bus_buf_sf) + geom_histogram(mapping = aes(x = crimes))
# Frequencies.
table(osm_bus_buf_sf$crimes)
table(tfl_bus_buf_sf$crimes)
View(osm_bus91_sf)
names(osm_bus_buf_sf)
table(osm_bus91_sf$bus_routes)
bb_sf <- getbb(place_name = "greater london united kingdom", format_out = "sf_polygon")
osm_bus_sf <- opq(bbox = bb_sf) %>%                                    # select bounding box
add_osm_feature(key = 'highway', value = 'bus_stop') %>% # select features
osmdata_sf() %>%                                         # specify class (sf or sp)
trim_osmdata(bb_poly = bb_sf)
osm_bus_sf
osm_bus_sf <- osm_bus_sf$osm_points # extract point only
table(osm_bus_sf$route)
table(osm_bus_sf$route_ref)
table(osm_bus_sf$type)
table(osm_bus_sf$towards)
sum(is.na(osm_bus_sf$towards))
install.packages("installr")
library(installr)
updateR()
install.packages("cowplot")
bb_sf <- getbb(place_name = "greater london united kingdom", format_out = "sf_polygon")
osm_bus_sf <- opq(bbox = bb_sf) %>%                                # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf() %>%                                                 # specify class (sf or sp)
trim_osmdata(bb_poly = bb_sf)                                    # trim by bounding box
library(jsonlite)
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(dplyr)
library(tidyr)
library(purrr)
library(cowplot) # maybe don't show?
# OSM query ==============================================================================================
# All queries begin with a bounding box specification i.e. the study region.
# This can be obtained manually, which requires some existing knowledge about
# an area using the latitude and longitude coordinates, but it is generally
# easier to use a search term. For instance
bb_sf <- getbb(place_name = "greater london united kingdom", format_out = "sf_polygon")
osm_bus_sf <- opq(bbox = bb_sf) %>%                                # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf() %>%                                                 # specify class (sf or sp)
trim_osmdata(bb_poly = bb_sf)
# View contents.
osm_bus_sf
# Extract points only.
osm_bus_sf <- osm_bus_sf$osm_points
View(osm_bus_sf)
names(osm_bus_sf)
osm_tube_sf <- opq(bbox = bb_sf) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf() %>%                                                 # specify class (sf or sp)
trim_osmdata(bb_poly = bb_sf)                                    # trim by bounding box
names(osm_tube_sf)
# View contents.
osm_tube_sf
# Extract points only.
osm_tube_sf <- osm_tube_sf$osm_points
names(osm_tube_sf)
select(osm_tube_sf, tube)
table(osm_tube_sf$line)
table(osm_tube_sf$colour)
table(osm_tube_sf$website.tube)
table(osm_tube_sf$train)
table(osm_tube_sf$subway)
table(osm_tube_sf$source.network)
table(osm_tube_sf$network)
library(stringr)
# Filter any that include "London Underground".
osm_tube_sf <- osm_stat_sf %>%
filter(str_detect(network, "London Underground"))
bb_sf <- getbb(place_name = "greater london united kingdom", format_out = "sf_polygon")
osm_stat_sf <- opq(bbox = bb_sf) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf() %>%                                                 # specify class (sf or sp)
trim_osmdata(bb_poly = bb_sf)                                    # trim by bounding box
# View contents.
osm_stat_sf
# Extract points only.
osm_stat_sf <- osm_stat_sf$osm_points
# Check the network tags.
table(osm_stat_sf$network)
# Filter any that include "London Underground".
osm_tube_sf <- osm_stat_sf %>%
filter(str_detect(network, "London Underground"))
bb_sf <- getbb(place_name = "greater london united kingdom", format_out = "sf_polygon")
osm_stat_sf <- opq(bbox = bb_sf) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf()
# View contents.
osm_stat_sf
# Extract points only.
osm_stat_sf <- osm_stat_sf$osm_points
# Check the network tags.
table(osm_stat_sf$network)
# Filter any that include "London Underground".
osm_tube_sf <- osm_stat_sf %>%
filter(str_detect(network, "London Underground"))
library(jsonlite)
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(dplyr)
library(tidyr)
library(purrr)
library(cowplot) # maybe don't show?
library(stringr)
# OSM query ==============================================================================================
# All queries begin with a bounding box specification i.e. the study region.
# This can be obtained manually, which requires some existing knowledge about
# an area using the latitude and longitude coordinates, but it is generally
# easier to use a search term. For instance
bb_sf <- getbb(place_name = "greater london united kingdom", format_out = "sf_polygon")
osm_stat_sf <- opq(bbox = bb_sf) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf() %>%                                                 # specify class (sf or sp)
trim_osmdata(bb_poly = bb_sf)                                    # trim by bounding box
# View contents.
osm_stat_sf
# Extract points only.
osm_stat_sf <- osm_stat_sf$osm_points
# Check the network tags.
table(osm_stat_sf$network)
table(osm_stat_sf$network.subway)
table(osm_stat_sf$network.train)
table(osm_stat_sf$operator)
# Filter any that include "London Underground".
osm_tube_sf <- osm_stat_sf %>%
filter(str_detect(network, "London Underground"))
# Check lines.
table(osm_tube_sf$line)
View(osm_tube_sf)
# Check lines.
ggplot(data = osm_tube_sf) +
geom_sf()
library(jsonlite)
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(dplyr)
library(tidyr)
library(purrr)
library(cowplot) # maybe don't show?
library(stringr)
# OSM query ==============================================================================================
# All queries begin with a bounding box specification i.e. the study region.
# This can be obtained manually, which requires some existing knowledge about
# an area using the latitude and longitude coordinates, but it is generally
# easier to use a search term. For instance
bb_sf <- getbb(place_name = "greater london united kingdom", format_out = "sf_polygon")
osm_stat_sf <- opq(bbox = bb_sf) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf() %>%                                                 # specify class (sf or sp)
trim_osmdata(bb_poly = bb_sf)                                    # trim by bounding box
# View contents.
osm_stat_sf
# Extract points only.
osm_stat_sf <- osm_stat_sf$osm_points
# Check the network tags.
table(osm_stat_sf$network)
table(osm_stat_sf$operator)
# Filter any that include "London Underground".
osm_tube_sf <- osm_stat_sf %>%
filter(str_detect(network, "London Underground"))
# Check lines.
ggplot(data = osm_tube_sf) +
geom_sf()
# Check lines.
ggplot(data = osm_tube_sf) +
geom_sf(mapping = aes(fill = line))
# Check lines.
ggplot(data = osm_tube_sf) +
geom_sf(mapping = aes(colour = line))
lapply(osm_tube_sf, table)
lapply(osm_tube_sf, table[1:10])
lapply(osm_tube_sf[-"geometry"], table)
lapply(osm_tube_sf[1:10], table)
View(osm_tube_sf)
# Check lines.
ggplot(data = osm_tube_sf) +
geom_sf(mapping = aes(colour = fare_zone))
# Check lines.
sum(is.na(osm_tube_sf))
# Check lines.
sum(is.na(osm_tube_sf$fare_zone))
# Check lines.
ggplot(data = osm_tube_sf) +
geom_sf(mapping = aes(colour = fare_zone)) +
theme_minimal()
# Check lines.
ggplot(data = osm_tube_sf) +
geom_sf()
View(osm_tube_sf)
View(osm_tube_sf)
library(jsonlite)
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(dplyr)
library(tidyr)
library(purrr)
library(cowplot) # maybe don't show?
library(stringr)
# OSM query ==============================================================================================
# All queries begin with a bounding box specification i.e. the study region.
# This can be obtained manually, which requires some existing knowledge about
# an area using the latitude and longitude coordinates, but it is generally
# easier to use a search term. For instance
bb_sf <- getbb(place_name = "greater london united kingdom", format_out = "sf_polygon")
osm_stat_sf <- opq(bbox = bb_sf) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf() %>%                                                 # specify class (sf or sp)
trim_osmdata(bb_poly = bb_sf)                                    # trim by bounding box
# View contents.
osm_stat_sf
# Extract points only.
osm_stat_sf <- osm_stat_sf$osm_points
# Check the network tags.
table(osm_stat_sf$network)
table(osm_stat_sf$operator)
# Filter any that include "London Underground".
osm_tube_sf <- osm_stat_sf %>%
filter(str_detect(network, "London Underground"))
osm_tube_sf <- st_transform(osm_tube_sf, 27700)
bb_sf      <- st_transform(bb_sf, 27700)
ggplot() +
geom_sf(data = bb_sf) +
geom_sf(data = osm_tube_sf, size = 0.3)
ggplot() +
geom_sf(data = bb_sf) +
geom_sf(data = osm_tube_sf)
ggplot() +
geom_sf(data = bb_sf) +
geom_sf(data = osm_tube_sf, size = 0.8)
# Scape bus stops on route 24 from TfL. Warning is fine.
api_call <- fromJSON(readLines("https://api.tfl.gov.uk/Line/Meta/Modes"))
View(api_call)
View(osm_tube_sf)
table(osm_tube_sf$line)
ggplot() +
geom_sf(data = bb_sf) +
geom_sf(data = osm_tube_sf, size = 0.8, mapping = aes(colour = line))
ggplot() +
geom_sf(data = bb_sf) +
geom_sf(data = osm_tube_sf, mapping = aes(colour = line))
# Scape bus stops on route 24 from TfL. Warning is fine.
api_call <- fromJSON(readLines("https://api.tfl.gov.uk/Line/Meta/Modes"))
View(api_call)
library(readr)
library(dplyr)
library(tidyr)
# All queries begin with a bounding box specification i.e. the study region.
# This can be obtained manually, which requires some existing knowledge about
# an area using the latitude and longitude coordinates, but it is generally
# easier to use a search term. For instance
bb <- getbb(place_name = "greater london", format_out = "sf_polygon")
p <- opq(bbox = bb) %>%                                           # select bounding box
add_osm_feature(key = 'amenity', value = 'bicycle_parking') %>%
osmdata_sf()
p <- opq(bbox = bb) %>%                                           # select bounding box
add_osm_feature(key = 'amenity', value = 'bicycle_parking') %>%
osmdata_sf() %>%                                                    # specify class (sf or sp)
trim_osmdata(bb_poly = bb_sf)
p <- opq(bbox = bb) %>%                                           # select bounding box
add_osm_feature(key = 'amenity', value = 'bicycle_parking') %>%
osmdata_sf() %>%                                                    # specify class (sf or sp)
trim_osmdata(bb_poly = bbf)
p <- opq(bbox = bb) %>%                                           # select bounding box
add_osm_feature(key = 'amenity', value = 'bicycle_parking') %>%
osmdata_sf() %>%                                                    # specify class (sf or sp)
trim_osmdata(bb_poly = bb)
p
p.sf <- p$osm_points # extract point only
View(p.sf )
p <- opq(bbox = bb) %>%                                           # select bounding box
add_osm_feature(key = 'amenity', value = 'bicycle_rental') %>%
osmdata_sf() %>%                                                    # specify class (sf or sp)
trim_osmdata(bb_poly = bb)
p.sf <- p$osm_points # extract point only
ggplot() +
geom_sf(data = bb) +
geom_sf(data = p.sf)
tfl_bike <- api_call <- fromJSON(readLines("https://api.tfl.gov.uk/bikepoint"))
View(tfl_bike)
tfl_bike_sf <- st_as_sf(tfl_bike, coords = c(x = lat, y = lon), crs = 4326))
tfl_bike_sf <- st_as_sf(tfl_bike, coords = c(x = lat, y = lon), crs = 4326)
tfl_bike_sf <- st_as_sf(tfl_bike, coords = c(x = lat, y = lon), crs = 4326))
tfl_bike_sf <- st_as_sf(tfl_bike, coords = c(x = lat, y = lon), crs = 4326)
View(api_call)
ckass(api_call)
class(api_call)
tfl_bike_sf <- st_as_sf(tfl_bike, coords = c(x = "lat", y = "lon"), crs = 4326)
ggplot() +
geom_sf(data = p.sf) +
geom_sf(data = tfl_bike_sf, col = "Red")
p.sf <- st_transform(p.sf, 4326)
ggplot() +
geom_sf(data = p.sf) +
geom_sf(data = tfl_bike_sf, col = "Red")
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(dplyr)
library(tidyr)
# All queries begin with a bounding box specification i.e. the study region.
# This can be obtained manually, which requires some existing knowledge about
# an area using the latitude and longitude coordinates, but it is generally
# easier to use a search term. For instance
bb <- getbb(place_name = "greater london", format_out = "sf_polygon")
p <- opq(bbox = bb) %>%                                           # select bounding box
add_osm_feature(key = 'amenity', value = 'bicycle_rental') %>%
osmdata_sf() %>%                                                    # specify class (sf or sp)
trim_osmdata(bb_poly = bb)
p
p.sf <- p$osm_points # extract point only
ggplot() +
geom_sf(data = bb) +
geom_sf(data = p.sf)
tfl_bike <- api_call <- fromJSON(readLines("https://api.tfl.gov.uk/bikepoint"))
tfl_bike_sf <- tfl_bike %>%
st_as_sf(coords = c(x = "lat", y = "lon"), crs = 4326)
plot(st_geometry(tfl_bike_sf))
tfl_bike_sf <- tfl_bike %>%
st_as_sf(coords = c(y = "lat", x = "lon"), crs = 4326)
plot(st_geometry(tfl_bike_sf))
tfl_bike_sf <- tfl_bike %>%
st_as_sf(coords = c(y = "lat", x = "lon"), crs = 4326)
plot(st_geometry(tfl_bike_sf))
ggplot(tfl_bike_sf)+ geom_sf()
View(tfl_bike_sf)
View(tfl_bike)
tfl_bike_sf <- tfl_bike %>%
st_as_sf(coords = c(x = "lat", y = "lon"), crs = 4326)
ggplot(tfl_bike_sf) + geom_sf()
tfl_bike_sf <- tfl_bike %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326)
ggplot(tfl_bike_sf) + geom_sf()
ggplot() +
geom_sf(data = p.sf) +
geom_sf(data = tfl_bike_sf, col = "Red")
ggplot(p.sf) + geom_sf()
ggplot(tfl_bike_sf) + geom_sf()
ggplot() +
geom_sf(data = tfl_bike_sf) +
geom_sf(data = p.sf, col = "Red")
ggplot() +
geom_sf(data = bb) +
geom_sf(data = tfl_bike_sf) +
geom_sf(data = p.sf, col = "Red", alpha = 0.2)
ggplot(tfl_bike_sf) + geom_sf()
ggplot() +
geom_sf(data = bb) +
geom_sf(data = tfl_bike_sf)
ggplot() +
geom_sf(data = bb) +
geom_sf(data = tfl_bike_sf) +
geom_sf(data = p.sf, col = "Red", alpha = 0.2)
