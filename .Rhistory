add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf() %>%                                                 # specify class (sf or sp)
trim_osmdata(bb_poly = bb_sf)                                    # trim by bounding box
# View contents.
osm_stat_sf
# Extract points only.
osm_stat_sf <- osm_stat_sf$osm_points
# Check the network tags.
table(osm_stat_sf$network)
table(osm_stat_sf$operator)
# Filter any that include "London Underground".
osm_tube_sf <- osm_stat_sf %>%
filter(str_detect(network, "London Underground"))
osm_tube_sf <- st_transform(osm_tube_sf, 27700)
bb_sf      <- st_transform(bb_sf, 27700)
ggplot() +
geom_sf(data = bb_sf) +
geom_sf(data = osm_tube_sf, mapping = aes(colour = line))
ggplot() +
geom_sf(data = bb_sf) +
geom_sf(data = osm_tube_sf)
ggplot() +
geom_sf(data = bb_sf) +
geom_sf(data = osm_tube_sf, size = 0.8)
# Scape bus stops on route 24 from TfL. Warning is fine.
api_call <- fromJSON(readLines("https://api.tfl.gov.uk/line/northern/route/sequence/outbound"))
tfl_north_df <- api_call %>%
pluck("stations") %>%
select(name, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
ggplot() +
geom_sf(data = tfl_north_df, size = 2) +
geom_sf(data = osm_tube_sf, col = "red", alpha = 0.5) +
theme_minimal()
# Plot difference.
ggplot() +
geom_sf(data = osm_tube_sf) +
geom_sf(data = tfl_north_df, alpha = 0.5)
# Plot difference.
ggplot() +
geom_sf(data = osm_tube_sf) +
geom_sf(data = tfl_north_df, alpha = 0.5)
# Plot difference.
ggplot() +
geom_sf(data = osm_tube_sf) +
geom_sf(data = tfl_north_df, color = "red", alpha = 0.5)
# Plot difference.
ggplot() +
geom_sf(data = osm_tube_sf) +
geom_sf(data = tfl_north_df, color = "red", alpha = 0.5) +
coord_sf(crs = 27700)
# Plot difference.
ggplot() +
geom_sf(data = osm_tube_sf) +
geom_sf(data = tfl_north_df, color = "red", alpha = 0.5) +
coord_sf(datum = st_crs(27700))
# Plot difference.
ggplot() +
geom_sf(data = osm_tube_sf) +
geom_sf(data = tfl_north_df, color = "red", alpha = 0.5)
# Keep only OSM northern line.
osm_bus91_dup_sf <- osm_tube_sf %>%
filter(line == "northern")
table(osm_tube_sf$line)
# Keep only OSM northern line.
osm_north_sf <- osm_tube_sf %>%
filter(line == "Northern")
# Plot difference.
ggplot() +
geom_sf(data = osm_tube_sf) +
geom_sf(data = tfl_north_df, color = "red", alpha = 0.5)
library(jsonlite)
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(dplyr)
library(tidyr)
library(purrr)
library(cowplot) # maybe don't show?
library(stringr)
# OSM query ==============================================================================================
# All queries begin with a bounding box specification i.e. the study region.
# This can be obtained manually, which requires some existing knowledge about
# an area using the latitude and longitude coordinates, but it is generally
# easier to use a search term. For instance
bb_sf <- getbb(place_name = "greater london united kingdom", format_out = "sf_polygon")
osm_tube_sf <- opq(bbox = bb_sf) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf() %>%                                                 # specify class (sf or sp)
trim_osmdata(bb_poly = bb_sf)                                    # trim by bounding box
# View contents.
osm_tube_sf
# Extract points only.
osm_tube_sf <- osm_tube_sf$osm_points
# Check the network tags.
table(osm_tube_sf$network)
table(osm_tube_sf$operator)
# Filter any that include "London Underground".
osm_tube_sf <- osm_tube_sf %>%
filter(str_detect(network, "London Underground"))
# OSM query ==============================================================================================
# All queries begin with a bounding box specification i.e. the study region.
# This can be obtained manually, which requires some existing knowledge about
# an area using the latitude and longitude coordinates, but it is generally
# easier to use a search term. For instance
bb_sf <- getbb(place_name = "greater london united kingdom", format_out = "sf_polygon")
osm_stat_sf <- opq(bbox = bb_sf) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf() %>%                                                 # specify class (sf or sp)
trim_osmdata(bb_poly = bb_sf)                                    # trim by bounding box
# View contents.
osm_stat_sf
# Extract points only.
osm_stat_sf <- osm_stat_sf$osm_points
View(osm_stat_sf)
temp <- filter(osm_stat_sf, line == "Northern")
table(temp$network)
library(jsonlite)
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(dplyr)
library(tidyr)
library(purrr)
library(cowplot) # maybe don't show?
library(stringr)
# OSM query ==============================================================================================
# All queries begin with a bounding box specification i.e. the study region.
# This can be obtained manually, which requires some existing knowledge about
# an area using the latitude and longitude coordinates, but it is generally
# easier to use a search term. For instance
bb_sf <- getbb(place_name = "greater london united kingdom", format_out = "sf_polygon")
osm_stat_sf <- opq(bbox = bb_sf) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf() %>%                                                 # specify class (sf or sp)
trim_osmdata(bb_poly = bb_sf)                                    # trim by bounding box
# View contents.
osm_stat_sf
# Extract points only.
osm_stat_sf <- osm_stat_sf$osm_points
# Check the network tags.
table(osm_stat_sf$network)
# Filter Northern line only/
osm_north_sf <- osm_stat_sf %>%
filter(line == "Northern"))
osm_north_sf <- st_transform(osm_north_sf, 27700)
bb_sf      <- st_transform(bb_sf, 27700)
# Filter Northern line only/
osm_north_sf <- osm_stat_sf %>%
filter(line == "Northern")
osm_north_sf <- st_transform(osm_north_sf, 27700)
bb_sf      <- st_transform(bb_sf, 27700)
ggplot() +
geom_sf(data = bb_sf) +
geom_sf(data = osm_tube_sf, size = 0.8)
ggplot() +
geom_sf(data = bb_sf) +
geom_sf(data = osm_north_sf, size = 0.8)
api_call <- fromJSON(readLines("https://api.tfl.gov.uk/line/northern/route/sequence/outbound"))
# Extract bus stop names and the lat-long coordinates, transform to BNG.
tfl_north_df <- api_call %>%
pluck("stations") %>%
select(name, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
# Plot difference.
ggplot() +
geom_sf(data = osm_north_sf) +
geom_sf(data = tfl_north_df, color = "red", alpha = 0.5)
# Plot difference.
ggplot() +
geom_sf(data = osm_north_sf) +
geom_sf(data = tfl_north_df, color = "red", size = 0.5)
# Plot difference.
ggplot() +
geom_sf(data = osm_north_sf) +
geom_sf(data = tfl_north_df, color = "red", size = 0.8)
# Plot difference.
ggplot() +
geom_sf(data = osm_north_sf) +
geom_sf(data = tfl_north_df, color = "red", alpha = 0.8)
# Plot difference.
ggplot() +
geom_sf(data = osm_north_sf) +
geom_sf(data = tfl_north_df, color = "red", alpha = 0.6)
# Plot difference.
ggplot() +
geom_sf(data = osm_north_sf) +
geom_sf(data = tfl_north_df, color = "red", alpha = 0.5)
# Assessing the impact in terms of crime. BTP data in January 2020.
btp_df <- read_csv("data/2020-01-btp-street.csv")
table(btp_df$`Reported by`)
table(btp_df$`Crime type`)
btp_sf <- btp_df %>%
filter(`Crime type` == "Violent and sexual offences") %>%
drop_na(Longitude, Latitude) %>%
st_as_sf(coords = c(x = "Longitude", y = "Latitude"), crs = 4326) %>%
st_transform(27700)
names(btp_df)
View(btp_df)
btp_sf <- btp_df %>%
filter(`Crime type` == "Violence and sexual offences") %>%
drop_na(Longitude, Latitude) %>%
st_as_sf(coords = c(x = "Longitude", y = "Latitude"), crs = 4326) %>%
st_transform(27700)
plot(st_geometry(btp_sf))
btp_sf <- btp_df %>%
filter(`Crime type` == "Violence and sexual offences") %>%
drop_na(Longitude, Latitude) %>%
st_as_sf(coords = c(x = "Longitude", y = "Latitude"), crs = 4326) %>%
st_transform(27700) %>%
st_intersection(bb_sf)
plot(st_geometry(btp_sf))
# Aggregate to in and around each tube station, for both TfL and OSM data.
osm_buff_sf <- st_buffer(osm_north_sf, dist = 50)
tfl_buff_sf <- st_buffer(tfl_north_sf, dist = 50)
# Extract bus stop names and the lat-long coordinates, transform to BNG.
tfl_north_sf <- api_call %>%
pluck("stations") %>%
select(name, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
tfl_buff_sf <- st_buffer(tfl_north_sf, dist = 50)
# Aggregate to each station.
osm_north_sf <- osm_buff_sf %>%
mutate(crimes = lengths(st_intersects(osm_buff_sf, btp_sf)))
tfl_north_sf <- tfl_buff_sf %>%
mutate(crimes = lengths(st_intersects(tfl_buff_sf, btp_sf)))
# Map out difference.
ggplot(data = osm_north_sf) +
geom_sf(mapping = aes(size = counts))
# Map out difference.
ggplot(data = osm_north_sf) +
geom_sf(mapping = aes(size = crimes))
# Make spatial.
btp_sf <- btp_df %>%
drop_na(Longitude, Latitude) %>%
st_as_sf(coords = c(x = "Longitude", y = "Latitude"), crs = 4326) %>%
st_transform(27700) %>%
st_intersection(bb_sf)
# Create buffers to define 'in and around'.
osm_buff_sf <- st_buffer(osm_north_sf, dist = 50)
tfl_buff_sf <- st_buffer(tfl_north_sf, dist = 50)
# Aggregate to each station.
osm_north_sf <- osm_buff_sf %>%
mutate(crimes = lengths(st_intersects(osm_buff_sf, btp_sf)))
tfl_north_sf <- tfl_buff_sf %>%
mutate(crimes = lengths(st_intersects(tfl_buff_sf, btp_sf)))
# Map out difference.
ggplot(data = osm_north_sf) +
geom_sf(mapping = aes(size = crimes))
library(jsonlite)
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(dplyr)
library(tidyr)
library(purrr)
library(cowplot) # maybe don't show?
library(stringr)
# OSM query ==============================================================================================
# All queries begin with a bounding box specification i.e. the study region.
# This can be obtained manually, which requires some existing knowledge about
# an area using the latitude and longitude coordinates, but it is generally
# easier to use a search term. For instance
bb_sf <- getbb(place_name = "greater london united kingdom", format_out = "sf_polygon")
osm_stat_sf <- opq(bbox = bb_sf) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf() %>%                                                 # specify class (sf or sp)
trim_osmdata(bb_poly = bb_sf)                                    # trim by bounding box
# View contents.
osm_stat_sf
# Extract points only.
osm_stat_sf <- osm_stat_sf$osm_points
# Check the network tags.
table(osm_stat_sf$network)
# Filter Northern line only/
osm_north_sf <- osm_stat_sf %>%
filter(line == "Northern")
osm_north_sf <- st_transform(osm_north_sf, 27700)
bb_sf      <- st_transform(bb_sf, 27700)
ggplot() +
geom_sf(data = bb_sf) +
geom_sf(data = osm_north_sf, size = 0.8)
# TfL scrape ==============================================================================================
# Scape bus stops on route 24 from TfL. Warning is fine.
api_call <- fromJSON(readLines("https://api.tfl.gov.uk/line/northern/route/sequence/outbound"))
# Extract bus stop names and the lat-long coordinates, transform to BNG.
tfl_north_sf <- api_call %>%
pluck("stations") %>%
select(name, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
# Plot difference.
ggplot() +
geom_sf(data = osm_north_sf) +
geom_sf(data = tfl_north_sf, color = "red", alpha = 0.5)
# Assessing the impact in terms of crime. BTP data in January 2020.
btp_df <- read_csv("data/2020-01-btp-street.csv")
# Make spatial.
btp_sf <- btp_df %>%
drop_na(Longitude, Latitude) %>%
st_as_sf(coords = c(x = "Longitude", y = "Latitude"), crs = 4326) %>%
st_transform(27700) %>%
st_intersection(bb_sf)
# Create buffers to define 'in and around'.
osm_buff_sf <- st_buffer(osm_north_sf, dist = 50)
tfl_buff_sf <- st_buffer(tfl_north_sf, dist = 50)
# Aggregate to each station.
osm_north_sf <- osm_buff_sf %>%
mutate(crimes = lengths(st_intersects(osm_buff_sf, btp_sf)))
tfl_north_sf <- tfl_buff_sf %>%
mutate(crimes = lengths(st_intersects(tfl_buff_sf, btp_sf)))
# Map out difference.
ggplot(data = osm_north_sf) +
geom_sf(mapping = aes(size = crimes))
# Map out difference.
ggplot(data = osm_north_sf) +
geom_sf(mapping = aes(size = crimes, colour = crimes))
ggplot(data = tfl_north_sf) +
geom_sf(mapping = aes(size = crimes, colour = crimes))
install.packages("patchwork")
library(patchwork)
p1 <- ggplot(data = osm_north_sf) +
geom_sf(mapping = aes(size = crimes, colour = crimes))
p2 <- ggplot(data = tfl_north_sf) +
geom_sf(mapping = aes(size = crimes, colour = crimes))
p1 + p2
# Map out difference.
p1 <- ggplot(data = osm_north_sf) +
geom_sf(mapping = aes(size = crimes, colour = crimes)) +
labs(title = "Open Street Map")
p2 <- ggplot(data = tfl_north_sf) +
geom_sf(mapping = aes(size = crimes, colour = crimes)) +
labs(title = "Transport for London")
p1 + p2
# Map out difference.
p1 <- ggplot(data = osm_north_sf) +
geom_sf(mapping = aes(colour = crimes)) +
labs(title = "Open Street Map")
p2 <- ggplot(data = tfl_north_sf) +
geom_sf(mapping = aes(colour = crimes)) +
labs(title = "Transport for London")
p1 + p2
# Map out difference.
p1 <- ggplot(data = osm_north_sf) +
geom_sf(mapping = aes(colour = crimes), size = 3) +
labs(title = "Open Street Map")
p2 <- ggplot(data = tfl_north_sf) +
geom_sf(mapping = aes(colour = crimes)) +
labs(title = "Transport for London")
p1 + p2
p2 <- ggplot(data = tfl_north_sf) +
geom_sf(mapping = aes(colour = crimes), size = 3) +
labs(title = "Transport for London")
p1 + p2
# Map out difference.
p1 <- ggplot(data = osm_north_sf) +
geom_sf(mapping = aes(colour = crimes), size = 3) +
labs(title = "Open Street Map") +
scale_fill_viridis_c()
p2 <- ggplot(data = tfl_north_sf) +
geom_sf(mapping = aes(colour = crimes), size = 3) +
labs(title = "Transport for London") +
scale_fill_viridis_c()
p1 + p2
# Map out difference.
p1 <- ggplot(data = osm_north_sf) +
geom_sf(mapping = aes(colour = crimes), size = 3) +
labs(title = "Open Street Map") +
scale_fill_viridis_c()
p2 <- ggplot(data = tfl_north_sf) +
geom_sf(mapping = aes(colour = crimes), size = 3) +
labs(title = "Transport for London") +
scale_fill_viridis_c()
p1 + p2
p1 <- ggplot(data = osm_north_sf) +
geom_sf(mapping = aes(colour = crimes), size = 3) +
labs(title = "Open Street Map") +
scale_colour_viridis_c()
p2 <- ggplot(data = tfl_north_sf) +
geom_sf(mapping = aes(colour = crimes), size = 3) +
labs(title = "Transport for London") +
scale_colour_viridis_c()
p1 + p2
p1 + p2
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(dplyr)
library(tidyr)
library(jsonlite)
bb_sf <- getbb(place_name = "greater london", format_out = "sf_polygon")
osm_bike_sf <- opq(bbox = bb_sf) %>%                                  # select bounding box.
add_osm_feature(key = 'amenity', value = 'bicycle_rental') %>%      # select keys and values.
osmdata_sf() %>%                                                    # specify class (sf or sp).
trim_osmdata(bb_poly = bb_sf)                                       # trim by the study region.
osm_bike_sf
osm_bike_sf <- osm_bike_sf$osm_points # extract point only
osm_bike_sf <- osm_bike_sf %>%
filter(brand == "Santander Cycles")
# TfL API
tfl_bike_sf <- api_call <- fromJSON(readLines("https://api.tfl.gov.uk/bikepoint"))
# Make spatial.
tfl_bike_sf <- tfl_bike_sf %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326)
# Plot comparison.
ggplot() +
geom_sf(data = bb_sf) +
geom_sf(data = osm_bike_sf) +
geom_sf(data = tfl_bike_sf, col = "red", alpha = 0.3)
temp <- fromJSON(readLines("https://api.tfl.gov.uk/line/northern/stoppoints"))
View(temp)
?readLines
api_call <- fromJSON(readLines("https://api.tfl.gov.uk/line/northern/stoppoints"))
View(api_call)
# Extract bus stop names and the lat-long coordinates, transform to BNG.
tfl_north_sf <- api_call %>%
select(name, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
# Extract bus stop names and the lat-long coordinates, transform to BNG.
tfl_north_sf <- api_call %>%
select(commonname, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
# Extract bus stop names and the lat-long coordinates, transform to BNG.
tfl_north_sf <- api_call %>%
select(commonName, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
View(tfl_north_sf)
View(api_call[[14]][[1]])
View(api_call[[15]][[1]])
library(jsonlite)
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(dplyr)
library(tidyr)
library(purrr)
library(patchwork)
# OSM query ==============================================================================================
# All queries begin with a bounding box specification i.e. the study region.
# This can be obtained manually, which requires some existing knowledge about
# an area using the latitude and longitude coordinates, but it is generally
# easier to use a search term. For instance
bb_sf <- getbb(place_name = "greater london united kingdom", format_out = "sf_polygon")
osm_stat_sf <- opq(bbox = bb_sf) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf() %>%                                                 # specify class (sf or sp)
trim_osmdata(bb_poly = bb_sf)                                    # trim by bounding box
# View contents.
osm_stat_sf
# Extract points only.
osm_stat_sf <- osm_stat_sf$osm_points
# Check the network tags.
table(osm_stat_sf$network)
# Filter Northern line only/
osm_north_sf <- osm_stat_sf %>%
filter(line == "Northern")
osm_north_sf <- st_transform(osm_north_sf, 27700)
bb_sf      <- st_transform(bb_sf, 27700)
ggplot() +
geom_sf(data = bb_sf) +
geom_sf(data = osm_north_sf, size = 0.8)
# TfL scrape ==============================================================================================
# Scape northern line locations from TfL. Warning is fine.
api_call <- fromJSON(readLines("https://api.tfl.gov.uk/line/northern/stoppoints"))
# Extract bus stop names and the lat-long coordinates, transform to BNG.
tfl_north_sf <- api_call %>%
select(commonName, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
# Plot difference.
ggplot() +
geom_sf(data = osm_north_sf) +
geom_sf(data = tfl_north_sf, color = "red", alpha = 0.5)
# Assessing the impact in terms of crime. BTP data in January 2020.
btp_df <- read_csv("data/2020-01-btp-street.csv")
# Make spatial.
btp_sf <- btp_df %>%
drop_na(Longitude, Latitude) %>%
st_as_sf(coords = c(x = "Longitude", y = "Latitude"), crs = 4326) %>%
st_transform(27700) %>%
st_intersection(bb_sf)
# Create buffers to define 'in and around'.
osm_buff_sf <- st_buffer(osm_north_sf, dist = 50)
tfl_buff_sf <- st_buffer(tfl_north_sf, dist = 50)
# Aggregate to each station.
osm_north_sf <- osm_buff_sf %>%
mutate(crimes = lengths(st_intersects(osm_buff_sf, btp_sf)))
tfl_north_sf <- tfl_buff_sf %>%
mutate(crimes = lengths(st_intersects(tfl_buff_sf, btp_sf)))
# Map out difference.
p1 <- ggplot(data = osm_north_sf) +
geom_sf(mapping = aes(colour = crimes), size = 3) +
labs(title = "Open Street Map") +
scale_colour_viridis_c()
p2 <- ggplot(data = tfl_north_sf) +
geom_sf(mapping = aes(colour = crimes), size = 3) +
labs(title = "Transport for London") +
scale_colour_viridis_c()
p1 + p2
class(api_call)
lapply(api_call, class)
