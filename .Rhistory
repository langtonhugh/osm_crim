# Chunk 8
ggplot(data = bb_sf) +
geom_sf()
# Chunk 9
osm_stat_sf <- opq(bbox = bb_sf) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf() %>%                                                 # specify class (sf or sp)
trim_osmdata(bb_poly = bb_sf)                                    # trim by bounding box
# Chunk 10
osm_stat_sf
# Chunk 11
osm_stat_sf <- osm_stat_sf$osm_points
# Chunk 13
osm_north_sf <- osm_stat_sf %>%
filter(line == "Northern")
# Chunk 14
ggplot() +
geom_sf(data = tfl_north_sf) +
geom_sf(data = osm_north_sf, color = "red", alpha = 0.5)
# Chunk 15
btp_df <- read_csv("data/2020-01-btp-street.csv")
# Chunk 16
# First, project the study region boundaries.
bb_sf <- st_transform(bb_sf, 27700)
# Then, make the police data spatial, and clip.
btp_sf <- btp_df %>%
drop_na(Longitude, Latitude) %>%
st_as_sf(coords = c(x = "Longitude", y = "Latitude"), crs = 4326) %>%
st_transform(27700) %>%
st_intersection(bb_sf)
# Create buffers to define 'in and around'.
osm_buff_sf <- st_buffer(osm_north_sf, dist = 50)
tfl_buff_sf <- st_buffer(tfl_north_sf, dist = 50)
# Create variable 'crimes' which contains counts of the number of crimes falling within each buffer.
osm_north_sf <- osm_buff_sf %>%
mutate(crimes = lengths(st_intersects(osm_buff_sf, btp_sf)))
tfl_north_sf <- tfl_buff_sf %>%
mutate(crimes = lengths(st_intersects(tfl_buff_sf, btp_sf)))
osm_buff_sf
osm_north_sf
# Assign the same CRS.
osm_north_sf <- st_transform(osm_north_sf, 27700)
tfl_north_sf <- st_transform(tfl_north_sf, 27700)
# Create buffers to define 'in and around'.
osm_buff_sf <- st_buffer(osm_north_sf, dist = 50)
tfl_buff_sf <- st_buffer(tfl_north_sf, dist = 50)
# Create variable 'crimes' which contains counts of the number of crimes falling within each buffer.
osm_north_sf <- osm_buff_sf %>%
mutate(crimes = lengths(st_intersects(osm_buff_sf, btp_sf)))
tfl_north_sf <- tfl_buff_sf %>%
mutate(crimes = lengths(st_intersects(tfl_buff_sf, btp_sf)))
p1 <- ggplot(data = osm_north_sf) +
geom_sf(mapping = aes(colour = crimes), size = 3) +
labs(title = "Open Street Map") +
scale_colour_viridis_c()
p2 <- ggplot(data = tfl_north_sf) +
geom_sf(mapping = aes(colour = crimes), size = 3) +
labs(title = "Transport for London") +
scale_colour_viridis_c()
p1 + p2
p1 <- ggplot(data = osm_north_sf) +
geom_sf(mapping = aes(colour = crimes), size = 2) +
labs(title = "Open Street Map") +
scale_colour_viridis_c()
p2 <- ggplot(data = tfl_north_sf) +
geom_sf(mapping = aes(colour = crimes), size = 2) +
labs(title = "Transport for London") +
scale_colour_viridis_c()
p1 + p2
# Chunk 1: setup
knitr::opts_chunk$set(echo = T, message = F, warning = F)
library(jsonlite)
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(dplyr)
library(tidyr)
library(patchwork)
# Chunk 2
library(jsonlite)
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(dplyr)
library(tidyr)
library(purrr)
library(patchwork)
# Chunk 3: tfl
knitr::include_graphics("img/tfl_screenshot.png")
# Chunk 4: getapi
api_call <- fromJSON(readLines("https://api.tfl.gov.uk/line/northern/stoppoints"))
# Chunk 5: apispatial
tfl_north_sf <- api_call %>%
select(commonName, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
# Chunk 6: tflmap
ggplot(tfl_north_sf) +
geom_sf()
# Chunk 7
bb_sf <- getbb(place_name = "greater london united kingdom", format_out = "sf_polygon")
# Chunk 8
ggplot(data = bb_sf) +
geom_sf()
# Chunk 9
osm_stat_sf <- opq(bbox = bb_sf) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf() %>%                                                 # specify class
trim_osmdata(bb_poly = bb_sf)                                    # trim by bounding box
# Chunk 10
osm_stat_sf
osm_stat_sf <- osm_stat_sf$osm_points
osm_north_sf <- osm_stat_sf %>%
filter(line == "Northern")
ggplot() +
geom_sf(data = tfl_north_sf) +
geom_sf(data = osm_north_sf, color = "red", alpha = 0.5)
osm_stat_sf %>%
filter(network == "London Underground") %>%
ggplot() +
geom_sf()
ggplot() +
geom_sf(data = filter(osm_stat_sf, network == "London Underground")) +
geom_sf(data = osm_north_sf, color = "red")
ggplot() +
geom_sf(data = filter(osm_stat_sf, network == "London Underground")) +
geom_sf(data = tfl_north_sf, color = "blue")
ggplot() +
geom_sf(data = filter(osm_stat_sf, network == "London Underground")) +
geom_sf(data = tfl_north_sf, color = "blue") +
geom_sf(data = osm_north_sf, color = "red")
ggplot() +
geom_sf(data = filter(osm_stat_sf, network == "London Underground")) +
geom_sf(data = tfl_north_sf, color = "blue", alpha = 0.5) +
```
ggplot() +
geom_sf(data = filter(osm_stat_sf, network == "London Underground")) +
geom_sf(data = tfl_north_sf, color = "blue", alpha = 0.5)
ggplot() +
geom_sf(data = filter(osm_stat_sf, network == "London Underground")) +
geom_sf(data = tfl_north_sf, color = "red", alpha = 0.5)
ggplot() +
geom_sf(data = filter(osm_stat_sf, network == "London Underground")) +
geom_sf(data = tfl_north_sf, color = "red", alpha = 0.4)
# Chunk 1: setup
knitr::opts_chunk$set(echo = T, message = F, warning = F)
library(jsonlite)
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(dplyr)
library(tidyr)
library(patchwork)
# Chunk 2
library(jsonlite)
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(dplyr)
library(tidyr)
library(purrr)
library(patchwork)
# Chunk 3: tfl
knitr::include_graphics("img/tfl_screenshot.png")
# Chunk 4: getapi
api_call <- fromJSON(readLines("https://api.tfl.gov.uk/line/northern/stoppoints"))
# Chunk 5: apispatial
tfl_north_sf <- api_call %>%
select(commonName, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
# Chunk 6: tflmap
ggplot(tfl_north_sf) +
geom_sf()
# Chunk 7
bb_sf <- getbb(place_name = "greater london united kingdom", format_out = "sf_polygon")
# Chunk 8
ggplot(data = bb_sf) +
geom_sf()
# Chunk 9
osm_stat_sf <- opq(bbox = bb_sf) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf() %>%                                                 # specify class
trim_osmdata(bb_poly = bb_sf)                                    # trim by bounding box
# Chunk 10
osm_stat_sf
# Chunk 11
osm_stat_sf <- osm_stat_sf$osm_points
# Chunk 13
osm_north_sf <- osm_stat_sf %>%
filter(line == "Northern")
# Chunk 1: setup
knitr::opts_chunk$set(echo = T, message = F, warning = F)
library(jsonlite)
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(dplyr)
library(tidyr)
library(patchwork)
# Chunk 2
library(jsonlite)
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(dplyr)
library(tidyr)
library(purrr)
library(patchwork)
# Chunk 3: tfl
knitr::include_graphics("img/tfl_screenshot.png")
# Chunk 4: getapi
api_call <- fromJSON(readLines("https://api.tfl.gov.uk/line/northern/stoppoints"))
# Chunk 5: apispatial
tfl_north_sf <- api_call %>%
select(commonName, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
# Chunk 6: tflmap
ggplot(tfl_north_sf) +
geom_sf()
# Chunk 7
bb_sf <- getbb(place_name = "greater london united kingdom", format_out = "sf_polygon")
# Chunk 8
ggplot(data = bb_sf) +
geom_sf()
# Chunk 9
osm_stat_sf <- opq(bbox = bb_sf) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf() %>%                                                 # specify class
trim_osmdata(bb_poly = bb_sf)                                    # trim by bounding box
# Chunk 10
osm_stat_sf
# Chunk 11
osm_stat_sf <- osm_stat_sf$osm_points
# Chunk 13
osm_north_sf <- osm_stat_sf %>%
filter(line == "Northern")
api_call <- fromJSON(readLines("https://api.tfl.gov.uk/line/northern/stoppoints"))
# Chunk 1: setup
knitr::opts_chunk$set(echo = T, message = F, warning = F)
library(jsonlite)
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(dplyr)
library(tidyr)
library(patchwork)
# Chunk 2
library(jsonlite)
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(dplyr)
library(tidyr)
library(purrr)
library(patchwork)
# Chunk 3: tfl
knitr::include_graphics("img/tfl_screenshot.png")
api_call <- fromJSON(readLines("https://api.tfl.gov.uk/line/northern/stoppoints"))
# Chunk 1: setup
knitr::opts_chunk$set(echo = T, message = F, warning = F)
library(jsonlite)
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(dplyr)
library(tidyr)
library(patchwork)
# Chunk 2
library(jsonlite)
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(dplyr)
library(tidyr)
library(purrr)
library(patchwork)
# Chunk 3: tfl
knitr::include_graphics("img/tfl_screenshot.png")
# Chunk 4: getapi
api_call <- fromJSON(readLines("https://api.tfl.gov.uk/line/northern/stoppoints"))
# Chunk 5: apispatial
tfl_north_sf <- api_call %>%
select(commonName, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
# Chunk 6: tflmap
ggplot(tfl_north_sf) +
geom_sf()
# Chunk 7
bb_sf <- getbb(place_name = "greater london united kingdom", format_out = "sf_polygon")
# Chunk 8
ggplot(data = bb_sf) +
geom_sf()
# Chunk 9
osm_stat_sf <- opq(bbox = bb_sf) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf() %>%                                                 # specify class
trim_osmdata(bb_poly = bb_sf)                                    # trim by bounding box
# Chunk 10
osm_stat_sf
# Chunk 11
osm_stat_sf <- osm_stat_sf$osm_points
# Chunk 13
osm_north_sf <- osm_stat_sf %>%
filter(line == "Northern")
ggplot() +
geom_sf(data = tfl_north_sf) +
geom_sf(data = osm_north_sf, color = "red", alpha = 0.5)
ggplot(osm_north_sf) + geom_sf()
p1 <- ggplot(data = osm_north_sf) +
geom_sf(mapping = aes(colour = crimes), size = 2) +
labs(title = "Open Street Map") +
scale_colour_viridis_c()
p2 <- ggplot(data = tfl_north_sf) +
geom_sf(mapping = aes(colour = crimes), size = 2) +
labs(title = "Transport for London") +
scale_colour_viridis_c()
p1 + p2
# Assign the same CRS.
osm_north_sf <- st_transform(osm_north_sf, 27700)
tfl_north_sf <- st_transform(tfl_north_sf, 27700)
# Create buffers to define 'in and around'.
osm_buff_sf <- st_buffer(osm_north_sf, dist = 50)
tfl_buff_sf <- st_buffer(tfl_north_sf, dist = 50)
# Count number of crimes recorded within each buffer.
osm_north_sf <- osm_buff_sf %>%
mutate(crimes = lengths(st_intersects(osm_buff_sf, btp_sf)))
tfl_north_sf <- tfl_buff_sf %>%
mutate(crimes = lengths(st_intersects(tfl_buff_sf, btp_sf)))
btp_df <- read_csv("data/2020-01-btp-street.csv")
# First, project the study region boundaries.
bb_sf <- st_transform(bb_sf, 27700)
# Then, make the police data spatial, and clip.
btp_sf <- btp_df %>%
drop_na(Longitude, Latitude) %>%
st_as_sf(coords = c(x = "Longitude", y = "Latitude"), crs = 4326) %>%
st_transform(27700) %>%
st_intersection(bb_sf)
View(osm_north_sf)
osm_north_sf
View(osm_north_sf)
p <- arrange(osm_north_sf, crimes)
names(osm_north_sf)
# Chunk 1: setup
knitr::opts_chunk$set(echo = T, message = F, warning = F)
library(jsonlite)
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(dplyr)
library(tidyr)
library(patchwork)
# Chunk 2
library(jsonlite)
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(dplyr)
library(tidyr)
library(purrr)
library(patchwork)
# Chunk 3: tfl
knitr::include_graphics("img/tfl_screenshot.png")
# Chunk 4: getapi
api_call <- fromJSON(readLines("https://api.tfl.gov.uk/line/northern/stoppoints"))
# Chunk 5: apispatial
tfl_north_sf <- api_call %>%
select(commonName, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
# Chunk 6: tflmap
ggplot(tfl_north_sf) +
geom_sf()
# Chunk 7
bb_sf <- getbb(place_name = "greater london united kingdom", format_out = "sf_polygon")
# Chunk 8
ggplot(data = bb_sf) +
geom_sf()
# Chunk 9
osm_stat_sf <- opq(bbox = bb_sf) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf() %>%                                                 # specify class
trim_osmdata(bb_poly = bb_sf)                                    # trim by bounding box
# Chunk 10
osm_stat_sf
# Chunk 11
osm_stat_sf <- osm_stat_sf$osm_points
# Chunk 13
osm_north_sf <- osm_stat_sf %>%
filter(line == "Northern")
# Chunk 14
ggplot() +
geom_sf(data = tfl_north_sf) +
geom_sf(data = osm_north_sf, color = "red", alpha = 0.5)
# Chunk 15
btp_df <- read_csv("data/2020-01-btp-street.csv")
# Chunk 16
# First, project the study region boundaries.
bb_sf <- st_transform(bb_sf, 27700)
# Then, make the police data spatial, and clip.
btp_sf <- btp_df %>%
drop_na(Longitude, Latitude) %>%
st_as_sf(coords = c(x = "Longitude", y = "Latitude"), crs = 4326) %>%
st_transform(27700) %>%
st_intersection(bb_sf)
# Chunk 17
# Assign the same CRS.
osm_north_sf <- st_transform(osm_north_sf, 27700)
tfl_north_sf <- st_transform(tfl_north_sf, 27700)
# Create buffers to define 'in and around'.
osm_buff_sf <- st_buffer(osm_north_sf, dist = 50)
tfl_buff_sf <- st_buffer(tfl_north_sf, dist = 50)
# Count number of crimes recorded within each buffer.
osm_north_sf <- osm_buff_sf %>%
mutate(crimes = lengths(st_intersects(osm_buff_sf, btp_sf)))
tfl_north_sf <- tfl_buff_sf %>%
mutate(crimes = lengths(st_intersects(tfl_buff_sf, btp_sf)))
p1 <- ggplot(data = osm_north_sf) +
geom_sf(mapping = aes(colour = crimes), size = 2) +
labs(title = "Open Street Map") +
scale_colour_viridis_c()
p2 <- ggplot(data = tfl_north_sf) +
geom_sf(mapping = aes(colour = crimes), size = 2) +
labs(title = "Transport for London") +
scale_colour_viridis_c()
p1 + p2
p <- arrange(osm_north_sf, crimes)
p <- arrange(osm_north_sf, crimes)
View(p)
View(tfl_north_sf)
# Chunk 1: setup
knitr::opts_chunk$set(echo = T, message = F, warning = F)
library(jsonlite)
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(dplyr)
library(tidyr)
library(patchwork)
# Chunk 2: packages
library(jsonlite)
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(dplyr)
library(tidyr)
library(patchwork)
# Chunk 3: tfl
knitr::include_graphics("img/tfl_screenshot.png")
?fromJSON
api_call <- fromJSON(txt = readLines("https://api.tfl.gov.uk/line/northern/stoppoints"))
osm_stat_sf <- opq(bbox = bb_sf) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf() %>%                                                 # specify class
trim_osmdata(bb_poly = bb_sf)                                    # trim by bounding box
# Chunk 1: setup
knitr::opts_chunk$set(echo = T, message = F, warning = F)
library(jsonlite)
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(dplyr)
library(tidyr)
library(patchwork)
# Chunk 2: packages
library(jsonlite)
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(dplyr)
library(tidyr)
library(patchwork)
# Chunk 3: tfl
knitr::include_graphics("img/tfl_screenshot.png")
# Chunk 4: getapi
api_call <- fromJSON(txt = readLines("https://api.tfl.gov.uk/line/northern/stoppoints"))
# Chunk 5: apispatial
tfl_north_sf <- api_call %>%
select(commonName, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
# Chunk 6: tflmap
ggplot(tfl_north_sf) +
geom_sf()
# Chunk 7: bb
bb_sf <- getbb(place_name = "greater london united kingdom", format_out = "sf_polygon")
# Chunk 8: bbmap
ggplot(data = bb_sf) +
geom_sf()
osm_stat_sf <- opq(bbox = bb_sf) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf() %>%                                                 # specify class
trim_osmdata(bb_poly = bb_sf)                                    # trim by bounding box
osm_stat_sf
