p1 / p2
# Chunk 1: setup
knitr::opts_chunk$set(echo = T, message = F, warning = F)
# library(jsonlite)
# library(osmdata)
# library(ggplot2)
# library(sf)
# library(readr)
# library(tidyr)
# library(patchwork)
# library(dplyr)
# Chunk 2: crimeload1
library(readr)
btp_df <- read_csv("data/2020-01-btp-street.csv")
# Chunk 4: tfl
knitr::include_graphics("img/tfl_screenshot.png")
# Chunk 5: getapi
library(jsonlite)
api_call <- fromJSON(readLines("https://api.tfl.gov.uk/line/jubilee/stoppoints"))
# Chunk 6: bb
library(osmdata)
bb_sf <- getbb(place_name = "greater london united kingdom", format_out = "sf_polygon")
# Chunk 7: bbmanual
bb_gl <- c(-0.5103751, 51.2867602, 0.3340155, 51.6918741) # xmin, ymin, xmax, ymax
# Chunk 8: opq
osm_stat_sf <- opq(bbox = bb_gl) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf()                                                     # specify class
# Chunk 9: printstations
osm_stat_sf
# Chunk 10: stationpoints
osm_stat_sf <- osm_stat_sf$osm_points
# Chunk 11: valuesofline
table(osm_stat_sf$line)
# Chunk 12: filterline
library(dplyr)
osm_jub_sf <- osm_stat_sf %>%
filter(grepl("Jubilee", line))
# Chunk 13: packages
library(ggplot2)
library(sf)
library(tidyr)
library(patchwork)
# Chunk 14: apispatial
tfl_jub_sf <- api_call %>%
select(commonName, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
# Chunk 15: tflmap
ggplot(tfl_jub_sf) +
geom_sf()
# Chunk 16: mapline
ggplot() +
geom_sf(data = tfl_jub_sf) +
geom_sf(data = osm_jub_sf, color = "red", alpha = 0.5)
# Chunk 17: crimespatial
btp_sf <- btp_df %>%
drop_na(Longitude, Latitude) %>%
st_as_sf(coords = c(x = "Longitude", y = "Latitude"), crs = 4326) %>%
st_transform(27700)
# Assign the same CRS.
osm_jub_sf <- st_transform(osm_jub_sf, 27700)
tfl_jub_sf <- st_transform(tfl_jub_sf, 27700)
# Create buffers to define 'in and around'.
osm_buff_sf <- st_buffer(osm_jub_sf, dist = 50)
tfl_buff_sf <- st_buffer(tfl_jub_sf, dist = 50)
# Count number of crimes recorded within each buffer.
osm_jub_sf <- osm_buff_sf %>%
mutate(crimes = lengths(st_intersects(osm_buff_sf, btp_sf)))
tfl_jub_sf <- tfl_buff_sf %>%
mutate(crimes = lengths(st_intersects(tfl_buff_sf, btp_sf)))
p1 <- ggplot(data = osm_jub_sf) +
geom_sf(mapping = aes(color = crimes), size = 2) +
labs(title = "Open Street Map") +
scale_color_viridis_c()
p2 <- ggplot(data = tfl_jub_sf) +
geom_sf(mapping = aes(color = crimes), size = 2) +
labs(title = "Transport for London") +
scale_color_viridis_c()
p1 + p2
?st_transform
# Chunk 1: setup
knitr::opts_chunk$set(echo = T, message = F, warning = F)
# library(jsonlite)
# library(osmdata)
# library(ggplot2)
# library(sf)
# library(readr)
# library(tidyr)
# library(patchwork)
# library(dplyr)
# Chunk 2: crimeload1
library(readr)
btp_df <- read_csv("data/2020-01-btp-street.csv")
# Chunk 4: tfl
knitr::include_graphics("img/tfl_screenshot.png")
# Chunk 5: getapi
library(jsonlite)
api_call <- fromJSON(readLines("https://api.tfl.gov.uk/line/jubilee/stoppoints"))
# Chunk 6: bb
library(osmdata)
bb_sf <- getbb(place_name = "greater london united kingdom", format_out = "sf_polygon")
# Chunk 7: bbmanual
bb_gl <- c(-0.5103751, 51.2867602, 0.3340155, 51.6918741) # xmin, ymin, xmax, ymax
# Chunk 8: opq
osm_stat_sf <- opq(bbox = bb_gl) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf()                                                     # specify class
# Chunk 9: printstations
osm_stat_sf
# Chunk 10: stationpoints
osm_stat_sf <- osm_stat_sf$osm_points
# Chunk 11: valuesofline
table(osm_stat_sf$line)
# Chunk 12: filterline
library(dplyr)
osm_jub_sf <- osm_stat_sf %>%
filter(grepl("Jubilee", line))
# Chunk 13: packages
library(ggplot2)
library(sf)
library(tidyr)
library(patchwork)
# Chunk 14: apispatial
tfl_jub_sf <- api_call %>%
select(commonName, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
# Chunk 15: tflmap
ggplot(tfl_jub_sf) +
geom_sf()
# Chunk 16: mapline
ggplot() +
geom_sf(data = tfl_jub_sf) +
geom_sf(data = osm_jub_sf, color = "red", alpha = 0.5)
btp_sf <- btp_df %>%
drop_na(Longitude, Latitude) %>%
st_as_sf(coords = c(x = "Longitude", y = "Latitude"), crs = 4326) %>%
st_transform(27700)
test <- st_transform(osm_jub_sf, tfl_jub_sf)
osm_jub_sf <- st_transform(osm_jub_sf, st_crs(tfl_jub_sf))
# Assign the same CRS.
osm_jub_sf <- st_transform(osm_jub_sf, st_crs(tfl_jub_sf))
# Create buffers to define 'in and around'.
osm_buff_sf <- st_buffer(osm_jub_sf, dist = 50)
tfl_buff_sf <- st_buffer(tfl_jub_sf, dist = 50)
# Count number of crimes recorded within each buffer.
osm_jub_sf <- osm_buff_sf %>%
mutate(crimes = lengths(st_intersects(osm_buff_sf, btp_sf)))
tfl_jub_sf <- tfl_buff_sf %>%
mutate(crimes = lengths(st_intersects(tfl_buff_sf, btp_sf)))
p1 <- ggplot(data = osm_jub_sf) +
geom_sf(mapping = aes(color = crimes), size = 2) +
labs(title = "Open Street Map") +
scale_color_viridis_c()
p2 <- ggplot(data = tfl_jub_sf) +
geom_sf(mapping = aes(color = crimes), size = 2) +
labs(title = "Transport for London") +
scale_color_viridis_c()
p1 / p2
# Chunk 1: setup
knitr::opts_chunk$set(echo = T, message = F, warning = F)
# library(jsonlite)
# library(osmdata)
# library(ggplot2)
# library(sf)
# library(readr)
# library(tidyr)
# library(patchwork)
# library(dplyr)
# Chunk 2: crimeload1
library(readr)
btp_df <- read_csv("data/2020-01-btp-street.csv")
# Chunk 4: tfl
knitr::include_graphics("img/tfl_screenshot.png")
# Chunk 5: getapi
library(jsonlite)
api_call <- fromJSON(readLines("https://api.tfl.gov.uk/line/jubilee/stoppoints"))
# Chunk 6: bb
library(osmdata)
bb_sf <- getbb(place_name = "greater london united kingdom", format_out = "sf_polygon")
# Chunk 7: bbmanual
bb_gl <- c(-0.5103751, 51.2867602, 0.3340155, 51.6918741) # xmin, ymin, xmax, ymax
# Chunk 8: opq
osm_stat_sf <- opq(bbox = bb_gl) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf()                                                     # specify class
# Chunk 9: printstations
osm_stat_sf
# Chunk 10: stationpoints
osm_stat_sf <- osm_stat_sf$osm_points
# Chunk 11: valuesofline
table(osm_stat_sf$line)
library(dplyr)
osm_jub_sf <- osm_stat_sf %>%
filter(grepl("Jubilee", line))
osm_stat_sf %>%
filter(grepl("Jubilee", line))
class(osm_stat_sf)
plot(st_geometry(osm_stat_sf))
library(sf)
library(dplyr)
osm_jub_sf <- osm_stat_sf %>%
filter(grepl("Jubilee", line))
# Chunk 1: setup
knitr::opts_chunk$set(echo = T, message = F, warning = F)
# library(jsonlite)
# library(osmdata)
# library(ggplot2)
# library(sf)
# library(readr)
# library(tidyr)
# library(patchwork)
# library(dplyr)
# Chunk 2: crimeload1
library(readr)
btp_df <- read_csv("data/2020-01-btp-street.csv")
# Chunk 4: tfl
knitr::include_graphics("img/tfl_screenshot.png")
# Chunk 5: getapi
library(jsonlite)
api_call <- fromJSON(readLines("https://api.tfl.gov.uk/line/jubilee/stoppoints"))
# Chunk 6: bb
library(osmdata)
library(sf)
bb_sf <- getbb(place_name = "greater london united kingdom", format_out = "sf_polygon")
# Chunk 7: bbmanual
bb_gl <- c(-0.51037, 51.28676, 0.33401, 51.69187) # xmin, ymin, xmax, ymax
osm_stat_sf <- opq(bbox = bb_gl) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf()                                                     # specify class
plot(st_geometry(osm_stat_sf))
liblibrary)
library(sf)
plot(st_geometry(osm_stat_sf))
osm_stat_sf
osm_stat_sf <- osm_stat_sf$osm_points
plot(st_geometry(osm_stat_sf))
p1 <- ggplot(data = osm_jub_sf) +
geom_sf(mapping = aes(color = crimes), size = 2) +
labs(title = "Open Street Map") +
scale_color_viridis_c(lim = c(0,42))
p2 <- ggplot(data = tfl_jub_sf) +
geom_sf(mapping = aes(color = crimes), size = 2) +
labs(title = "Transport for London") +
scale_color_viridis_c(lim = c(0,42))
p1 / p2
# Chunk 1: setup
knitr::opts_chunk$set(echo = T, message = F, warning = F)
# library(jsonlite)
# library(osmdata)
# library(ggplot2)
# library(sf)
# library(readr)
# library(tidyr)
# library(patchwork)
# library(dplyr)
# Chunk 2: crimeload1
library(readr)
btp_df <- read_csv("data/2020-01-btp-street.csv")
# Chunk 4: tfl
knitr::include_graphics("img/tfl_screenshot.png")
# Chunk 5: getapi
library(jsonlite)
api_call <- fromJSON(readLines("https://api.tfl.gov.uk/line/jubilee/stoppoints"))
# Chunk 6: bb
library(osmdata)
library(sf)
bb_sf <- getbb(place_name = "greater london united kingdom", format_out = "sf_polygon")
# Chunk 7: bbmanual
bb_gl <- c(-0.51037, 51.28676, 0.33401, 51.69187) # xmin, ymin, xmax, ymax
# Chunk 8: opq
osm_stat_sf <- opq(bbox = bb_gl) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf()                                                     # specify class
# Chunk 9: printstations
osm_stat_sf
# Chunk 10: stationpoints
osm_stat_sf <- osm_stat_sf$osm_points
# Chunk 12: filterline
library(dplyr)
osm_jub_sf <- osm_stat_sf %>%
filter(grepl("Jubilee", line))
# Chunk 13: packages
library(ggplot2)
library(sf)
library(tidyr)
library(patchwork)
# Chunk 14: apispatial
tfl_jub_sf <- api_call %>%
select(commonName, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
# Chunk 15: tflmap
ggplot(tfl_jub_sf) +
geom_sf()
# Chunk 16: mapline
ggplot() +
geom_sf(data = tfl_jub_sf) +
geom_sf(data = osm_jub_sf, color = "red", alpha = 0.5)
# Chunk 17: crimespatial
btp_sf <- btp_df %>%
drop_na(Longitude, Latitude) %>%
st_as_sf(coords = c(x = "Longitude", y = "Latitude"), crs = 4326) %>%
st_transform(27700)
# Chunk 18: buffer
# Ensure the same CRS (BNG, 27700).
osm_jub_sf <- st_transform(osm_jub_sf, st_crs(tfl_jub_sf))
# Create buffers to define 'in and around'.
osm_buff_sf <- st_buffer(osm_jub_sf, dist = 50)
tfl_buff_sf <- st_buffer(tfl_jub_sf, dist = 50)
# Count number of crimes recorded within each buffer.
osm_jub_sf <- osm_buff_sf %>%
mutate(crimes = lengths(st_intersects(osm_buff_sf, btp_sf)))
tfl_jub_sf <- tfl_buff_sf %>%
mutate(crimes = lengths(st_intersects(tfl_buff_sf, btp_sf)))
p1 <- ggplot(data = osm_jub_sf) +
geom_sf(mapping = aes(color = crimes), size = 2) +
labs(title = "Open Street Map") +
scale_color_viridis_c(lim = c(0,42))
p2 <- ggplot(data = tfl_jub_sf) +
geom_sf(mapping = aes(color = crimes), size = 2) +
labs(title = "Transport for London") +
scale_color_viridis_c(lim = c(0,42))
p1 + p2
# Chunk 1: setup
knitr::opts_chunk$set(echo = T, message = F, warning = F)
# library(jsonlite)
# library(osmdata)
# library(ggplot2)
# library(sf)
# library(readr)
# library(tidyr)
# library(patchwork)
# library(dplyr)
# Chunk 2: crimeload1
library(readr)
btp_df <- read_csv("data/2020-01-btp-street.csv")
# Chunk 4: tfl
knitr::include_graphics("img/tfl_screenshot.png")
# Chunk 5: getapi
library(jsonlite)
api_call <- fromJSON(readLines("https://api.tfl.gov.uk/line/jubilee/stoppoints"))
# Chunk 6: bb
library(osmdata)
library(sf)
bb_sf <- getbb(place_name = "greater london united kingdom", format_out = "sf_polygon")
# Chunk 7: bbmanual
bb_gl <- c(-0.51037, 51.28676, 0.33401, 51.69187) # xmin, ymin, xmax, ymax
# Chunk 8: opq
osm_stat_sf <- opq(bbox = bb_gl) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf()                                                     # specify class
# Chunk 9: printstations
osm_stat_sf
# Chunk 10: stationpoints
osm_stat_sf <- osm_stat_sf$osm_points
# Chunk 12: filterline
library(dplyr)
osm_jub_sf <- osm_stat_sf %>%
filter(grepl("Jubilee", line))
# Chunk 13: packages
library(ggplot2)
library(sf)
library(tidyr)
library(patchwork)
# Chunk 14: apispatial
tfl_jub_sf <- api_call %>%
select(commonName, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
# Chunk 15: tflmap
ggplot(tfl_jub_sf) +
geom_sf()
# Chunk 16: mapline
ggplot() +
geom_sf(data = tfl_jub_sf) +
geom_sf(data = osm_jub_sf, color = "red", alpha = 0.5)
# Chunk 17: crimespatial
btp_sf <- btp_df %>%
drop_na(Longitude, Latitude) %>%
st_as_sf(coords = c(x = "Longitude", y = "Latitude"), crs = 4326) %>%
st_transform(27700)
# Chunk 18: buffer
# Ensure the same CRS (BNG, 27700).
osm_jub_sf <- st_transform(osm_jub_sf, st_crs(tfl_jub_sf))
# Create buffers to define 'in and around'.
osm_buff_sf <- st_buffer(osm_jub_sf, dist = 50)
tfl_buff_sf <- st_buffer(tfl_jub_sf, dist = 50)
# Count number of crimes recorded within each buffer.
osm_jub_sf <- osm_buff_sf %>%
mutate(crimes = lengths(st_intersects(osm_buff_sf, btp_sf)))
tfl_jub_sf <- tfl_buff_sf %>%
mutate(crimes = lengths(st_intersects(tfl_buff_sf, btp_sf)))
# Chunk 19: crimemapcompare
p1 <- ggplot(data = osm_jub_sf) +
geom_sf(mapping = aes(color = crimes), size = 2) +
labs(title = "Open Street Map") +
scale_color_viridis_c(lim = c(0,42))
p2 <- ggplot(data = tfl_jub_sf) +
geom_sf(mapping = aes(color = crimes), size = 2) +
labs(title = "Transport for London") +
scale_color_viridis_c(lim = c(0,42))
p1 / p2
View(tfl_jub_sf)
View(osm_jub_sf)
osm_jub_sf
tfl_jub_sf
sum(osm_jub_sf$crimes)
sum(tfl_jub_sf$crimes)
osm_jub_sf %>% arrange(crimes)
osm_jub_sf %>% arrange(desc(crimes))
osm_tfl_sf %>% arrange(desc(crimes))
tfl_jub_sf %>% arrange(desc(crimes))
p12 <- p1 / p2
ggsave(filename = "img/maps.png", height = 6, width = 10, unit "cm")
getwd()
ggsave(filename = "img/maps.png", height = 6, width = 10, unit = "cm")
ggsave(filename = "img/maps.png", height = 12, width = 20, unit = "cm")
ggsave(filename = "img/maps.png", height = 16, width = 24, unit = "cm")
osm_stat_sf
osm_stat_sf <- opq(bbox = bb_gl) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf()                                                     # specify class
osm_stat_sf
class(osm_stat_sf$line)
# Chunk 1: setup
knitr::opts_chunk$set(message = F, warning = F, eval = T, echo = T)
# library(jsonlite)
# library(osmdata)
# library(ggplot2)
# library(sf)
# library(readr)
# library(tidyr)
# library(patchwork)
# library(dplyr)
# Chunk 2: crimeload1
library(readr)
btp_df <- read_csv("data/2020-01-btp-street.csv")
# Chunk 4: tfl
knitr::include_graphics("img/tfl_screenshot.png")
# Chunk 5: getapi
library(jsonlite)
api_call <- fromJSON(readLines("https://api.tfl.gov.uk/line/jubilee/stoppoints"))
# Chunk 6: bb
library(osmdata)
library(sf)
bb_sf <- getbb(place_name = "greater london united kingdom", format_out = "sf_polygon")
# Chunk 7: bbmanual
bb_gl <- c(-0.51037, 51.28676, 0.33401, 51.69187) # xmin, ymin, xmax, ymax
# Chunk 8: opq
osm_stat_sf <- opq(bbox = bb_gl) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf()                                                     # specify class
# Chunk 9: printstations
osm_stat_sf
# Chunk 1: setup
knitr::opts_chunk$set(message = F, warning = F, eval = T, echo = T)
# library(jsonlite)
# library(osmdata)
# library(ggplot2)
# library(sf)
# library(readr)
# library(tidyr)
# library(patchwork)
# library(dplyr)
# Chunk 2: crimeload1
library(readr)
btp_df <- read_csv("data/2020-01-btp-street.csv")
# Chunk 4: tfl
knitr::include_graphics("img/tfl_screenshot.png")
# Chunk 5: getapi
library(jsonlite)
api_call <- fromJSON(readLines("https://api.tfl.gov.uk/line/jubilee/stoppoints"))
# Chunk 6: bb
library(osmdata)
library(sf)
bb_sf <- getbb(place_name = "greater london united kingdom", format_out = "sf_polygon")
# Chunk 7: bbmanual
bb_gl <- c(-0.51037, 51.28676, 0.33401, 51.69187) # xmin, ymin, xmax, ymax
# Chunk 8: opq
osm_stat_sf <- opq(bbox = bb_gl) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf()                                                     # specify class
# Chunk 9: printstations
osm_stat_sf
# Chunk 10: stationpoints
osm_stat_sf <- osm_stat_sf$osm_points
# Chunk 12: filterline
library(dplyr)
osm_jub_sf <- osm_stat_sf %>%
filter(grepl("Jubilee", line))
# Chunk 13: packages
library(ggplot2)
library(sf)
library(tidyr)
library(patchwork)
# Chunk 14: apispatial
tfl_jub_sf <- api_call %>%
select(commonName, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
st_write(obj = osm_jub_sf, dsn = "data/jubilee_osm.shp")
st_write(obj = tfl_jub_sf, dsn = "data/jubilee_tfl.shp")
temp_osm_jub_sf <- osm_jub_sf %>%
select(name, geometry)
st_write(obj = temp_osm_jub_sf, dsn = "data/jubilee_osm.shp")
st_write(obj = tfl_jub_sf, dsn = "data/jubilee_tfl.shp")
temp_osm_jub_sf <- osm_jub_sf %>%
select(name, geometry)
st_write(obj = temp_osm_jub_sf, dsn = "data/jubilee_osm.shp")
st_write(obj = tfl_jub_sf, dsn = "data/jubilee_tfl.shp")
