add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf()                                                     # specify class
# Chunk 9: printstations
osm_stat_sf
# Chunk 10: stationpoints
osm_stat_sf <- osm_stat_sf$osm_points
# Chunk 11: valuesofline
table(osm_stat_sf$line)
# Chunk 12: filterline
library(dplyr)
osm_jub_sf <- osm_stat_sf %>%
filter(grepl("Jubilee", line))
# Chunk 13: packages
library(tidyr)
library(patchwork)
tfl_jub_sf <- api_call %>%
select(commonName, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
# Chunk 1: setup
knitr::opts_chunk$set(echo = T, message = F, warning = F)
# library(jsonlite)
# library(osmdata)
# library(ggplot2)
# library(sf)
# library(readr)
# library(tidyr)
# library(patchwork)
# library(dplyr)
# Chunk 2: crimeload1
library(readr)
btp_df <- read_csv("data/2020-01-btp-street.csv")
# Chunk 4: tfl
knitr::include_graphics("img/tfl_screenshot.png")
# Chunk 5: getapi
library(jsonlite)
api_call <- fromJSON(readLines("https://api.tfl.gov.uk/line/jubilee/stoppoints"))
# Chunk 6: bb
library(osmdata)
bb_sf <- getbb(place_name = "greater london united kingdom", format_out = "sf_polygon")
# Chunk 7: bbmanual
bb_gl <- c(-0.5103751, 51.2867602, 0.3340155, 51.6918741) # xmin, ymin, xmax, ymax
# Chunk 8: opq
osm_stat_sf <- opq(bbox = bb_gl) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf()                                                     # specify class
# Chunk 9: printstations
osm_stat_sf
# Chunk 10: stationpoints
osm_stat_sf <- osm_stat_sf$osm_points
# Chunk 11: valuesofline
table(osm_stat_sf$line)
# Chunk 12: filterline
library(dplyr)
osm_jub_sf <- osm_stat_sf %>%
filter(grepl("Jubilee", line))
# Chunk 13: packages
library(ggplot2)
library(sf)
library(tidyr)
library(patchwork)
tfl_jub_sf <- api_call %>%
select(commonName, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
ggplot(tfl_jub_sf) +
geom_sf()
ggplot() +
geom_sf(data = tfl_jub_sf) +
geom_sf(data = osm_jub_sf, color = "red", alpha = 0.5)
library(dplyr)
osm_jub_sf <- osm_stat_sf %>%
filter(grepl("Jubilee", line))
ggplot() +
geom_sf(data = tfl_jub_sf) +
geom_sf(data = osm_jub_sf, color = "red", alpha = 0.5)
btp_sf <- btp_df %>%
drop_na(Longitude, Latitude) %>%
st_as_sf(coords = c(x = "Longitude", y = "Latitude"), crs = 4326) %>%
st_transform(27700)
plot(st_geometry(btp_sf))
# Create buffers to define 'in and around'.
osm_buff_sf <- st_buffer(osm_jub_sf, dist = 50)
tfl_buff_sf <- st_buffer(tfl_jub_sf, dist = 50)
# Count number of crimes recorded within each buffer.
osm_jub_sf <- osm_buff_sf %>%
mutate(crimes = lengths(st_intersects(osm_buff_sf, btp_sf)))
tfl_jub_sf <- tfl_buff_sf %>%
mutate(crimes = lengths(st_intersects(tfl_buff_sf, btp_sf)))
# Assign the same CRS.
osm_jub_sf <- st_transform(osm_jub_sf, 27700)
tfl_jub_sf <- st_transform(tfl_jub_sf, 27700)
# Create buffers to define 'in and around'.
osm_buff_sf <- st_buffer(osm_jub_sf, dist = 50)
tfl_buff_sf <- st_buffer(tfl_jub_sf, dist = 50)
# Count number of crimes recorded within each buffer.
osm_jub_sf <- osm_buff_sf %>%
mutate(crimes = lengths(st_intersects(osm_buff_sf, btp_sf)))
tfl_jub_sf <- tfl_buff_sf %>%
mutate(crimes = lengths(st_intersects(tfl_buff_sf, btp_sf)))
p1 <- ggplot(data = osm_jub_sf) +
geom_sf(mapping = aes(color = crimes), size = 2) +
labs(title = "Open Street Map") +
scale_color_viridis_c()
p2 <- ggplot(data = tfl_jub_sf) +
geom_sf(mapping = aes(color = crimes), size = 2) +
labs(title = "Transport for London") +
scale_color_viridis_c()
p1 + p2
library(jsonlite)
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(dplyr)
library(tidyr)
library(purrr)
library(patchwork)
library(stringr)
# OSM query ==============================================================================================
# All queries begin with a bounding box specification i.e. the study region.
# This can be obtained manually, which requires some existing knowledge about
# an area using the latitude and longitude coordinates, but it is generally
# easier to use a search term. For instance
# no longer works.
# bb_sf <- getbb(place_name = "Greater London United Kingdom", format_out = "sf_polygon")
osm_stat_sf <- opq(bbox = c(-0.5103751, 51.2867602, 0.3340155, 51.6918741)) %>% # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>%           # select features
osmdata_sf()                                                               # specify class (sf or sp)
# trim_osmdata(bb_poly = bb_sf)                                           # trim by bounding box
# View contents.
osm_stat_sf
# Extract points only.
temp <- osm_stat_sf$osm_polygons
osm_stat_sf <- osm_stat_sf$osm_points
# Check the network tags.
table(osm_stat_sf$line)
# Filter jubern line only/
osm_jub_sf <- osm_stat_sf %>%
mutate(tube_line = line) %>%
filter(str_detect(tube_line, "Jubilee"))
osm_jub_sf <- st_transform(osm_jub_sf, 27700)
# bb_sf      <- st_transform(bb_sf, 27700)
ggplot() +
geom_sf(data = osm_jub_sf, size = 0.8)
# TfL scrape ==============================================================================================
# Scape jubern line locations from TfL. Warning is fine.
api_call <- fromJSON(readLines("https://api.tfl.gov.uk/line/jubilee/stoppoints"))
# Extract bus stop names and the lat-long coordinates, transform to BNG.
tfl_jub_sf <- api_call %>%
select(commonName, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
# Plot difference.
ggplot() +
geom_sf(data = osm_jub_sf) +
geom_sf(data = tfl_jub_sf, color = "red", alpha = 0.5)
# Save before some nerd updates the line like the jubern line did.
temp_osm_jub_sf <- osm_jub_sf %>%
select(name, geometry)
st_write(obj = temp_osm_jub_sf, dsn = "data/jubilee_osm.shp")
st_write(obj = tfl_jub_sf, dsn = "data/jubilee_tfl.shp")
# Assessing the impact in terms of crime. BTP data in January 2020.
btp_df <- read_csv("data/2020-01-btp-street.csv")
# Make spatial.
btp_sf <- btp_df %>%
drop_na(Longitude, Latitude) %>%
st_as_sf(coords = c(x = "Longitude", y = "Latitude"), crs = 4326) %>%
st_transform(27700)
# st_intersection(bb_sf)
# Create buffers to define 'in and around'.
osm_buff_sf <- st_buffer(osm_jub_sf, dist = 50)
tfl_buff_sf <- st_buffer(tfl_jub_sf, dist = 50)
# Aggregate to each station.
osm_jub_sf <- osm_buff_sf %>%
mutate(crimes = lengths(st_intersects(osm_buff_sf, btp_sf)))
tfl_jub_sf <- tfl_buff_sf %>%
mutate(crimes = lengths(st_intersects(tfl_buff_sf, btp_sf)))
# Map out difference.
p1 <- ggplot(data = osm_jub_sf) +
geom_sf(mapping = aes(colour = crimes), size = 3) +
labs(title = "Open Street Map") +
scale_colour_viridis_c(lim = c(0,42))
p2 <- ggplot(data = tfl_jub_sf) +
geom_sf(mapping = aes(colour = crimes), size = 3) +
labs(title = "Transport for London") +
scale_colour_viridis_c(lim = c(0,42))
p1 / p2
# Chunk 1: setup
knitr::opts_chunk$set(echo = T, message = F, warning = F)
# library(jsonlite)
# library(osmdata)
# library(ggplot2)
# library(sf)
# library(readr)
# library(tidyr)
# library(patchwork)
# library(dplyr)
# Chunk 2: crimeload1
library(readr)
btp_df <- read_csv("data/2020-01-btp-street.csv")
# Chunk 4: tfl
knitr::include_graphics("img/tfl_screenshot.png")
# Chunk 5: getapi
library(jsonlite)
api_call <- fromJSON(readLines("https://api.tfl.gov.uk/line/jubilee/stoppoints"))
# Chunk 6: bb
library(osmdata)
bb_sf <- getbb(place_name = "greater london united kingdom", format_out = "sf_polygon")
# Chunk 7: bbmanual
bb_gl <- c(-0.5103751, 51.2867602, 0.3340155, 51.6918741) # xmin, ymin, xmax, ymax
# Chunk 8: opq
osm_stat_sf <- opq(bbox = bb_gl) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf()                                                     # specify class
# Chunk 9: printstations
osm_stat_sf
# Chunk 10: stationpoints
osm_stat_sf <- osm_stat_sf$osm_points
# Chunk 11: valuesofline
table(osm_stat_sf$line)
# Chunk 12: filterline
library(dplyr)
osm_jub_sf <- osm_stat_sf %>%
filter(grepl("Jubilee", line))
# Chunk 13: packages
library(ggplot2)
library(sf)
library(tidyr)
library(patchwork)
# Chunk 14: apispatial
tfl_jub_sf <- api_call %>%
select(commonName, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
# Chunk 15: tflmap
ggplot(tfl_jub_sf) +
geom_sf()
# Chunk 16: mapline
ggplot() +
geom_sf(data = tfl_jub_sf) +
geom_sf(data = osm_jub_sf, color = "red", alpha = 0.5)
# Chunk 17: crimespatial
btp_sf <- btp_df %>%
drop_na(Longitude, Latitude) %>%
st_as_sf(coords = c(x = "Longitude", y = "Latitude"), crs = 4326) %>%
st_transform(27700)
# Assign the same CRS.
osm_jub_sf <- st_transform(osm_jub_sf, 27700)
tfl_jub_sf <- st_transform(tfl_jub_sf, 27700)
# Create buffers to define 'in and around'.
osm_buff_sf <- st_buffer(osm_jub_sf, dist = 50)
tfl_buff_sf <- st_buffer(tfl_jub_sf, dist = 50)
# Count number of crimes recorded within each buffer.
osm_jub_sf <- osm_buff_sf %>%
mutate(crimes = lengths(st_intersects(osm_buff_sf, btp_sf)))
tfl_jub_sf <- tfl_buff_sf %>%
mutate(crimes = lengths(st_intersects(tfl_buff_sf, btp_sf)))
p1 <- ggplot(data = osm_jub_sf) +
geom_sf(mapping = aes(color = crimes), size = 2) +
labs(title = "Open Street Map") +
scale_color_viridis_c()
p2 <- ggplot(data = tfl_jub_sf) +
geom_sf(mapping = aes(color = crimes), size = 2) +
labs(title = "Transport for London") +
scale_color_viridis_c()
p1 + p2
?st_transform
# Chunk 1: setup
knitr::opts_chunk$set(echo = T, message = F, warning = F)
# library(jsonlite)
# library(osmdata)
# library(ggplot2)
# library(sf)
# library(readr)
# library(tidyr)
# library(patchwork)
# library(dplyr)
# Chunk 2: crimeload1
library(readr)
btp_df <- read_csv("data/2020-01-btp-street.csv")
# Chunk 4: tfl
knitr::include_graphics("img/tfl_screenshot.png")
# Chunk 5: getapi
library(jsonlite)
api_call <- fromJSON(readLines("https://api.tfl.gov.uk/line/jubilee/stoppoints"))
# Chunk 6: bb
library(osmdata)
bb_sf <- getbb(place_name = "greater london united kingdom", format_out = "sf_polygon")
# Chunk 7: bbmanual
bb_gl <- c(-0.5103751, 51.2867602, 0.3340155, 51.6918741) # xmin, ymin, xmax, ymax
# Chunk 8: opq
osm_stat_sf <- opq(bbox = bb_gl) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf()                                                     # specify class
# Chunk 9: printstations
osm_stat_sf
# Chunk 10: stationpoints
osm_stat_sf <- osm_stat_sf$osm_points
# Chunk 11: valuesofline
table(osm_stat_sf$line)
# Chunk 12: filterline
library(dplyr)
osm_jub_sf <- osm_stat_sf %>%
filter(grepl("Jubilee", line))
# Chunk 13: packages
library(ggplot2)
library(sf)
library(tidyr)
library(patchwork)
# Chunk 14: apispatial
tfl_jub_sf <- api_call %>%
select(commonName, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
# Chunk 15: tflmap
ggplot(tfl_jub_sf) +
geom_sf()
# Chunk 16: mapline
ggplot() +
geom_sf(data = tfl_jub_sf) +
geom_sf(data = osm_jub_sf, color = "red", alpha = 0.5)
btp_sf <- btp_df %>%
drop_na(Longitude, Latitude) %>%
st_as_sf(coords = c(x = "Longitude", y = "Latitude"), crs = 4326) %>%
st_transform(27700)
test <- st_transform(osm_jub_sf, tfl_jub_sf)
osm_jub_sf <- st_transform(osm_jub_sf, st_crs(tfl_jub_sf))
# Assign the same CRS.
osm_jub_sf <- st_transform(osm_jub_sf, st_crs(tfl_jub_sf))
# Create buffers to define 'in and around'.
osm_buff_sf <- st_buffer(osm_jub_sf, dist = 50)
tfl_buff_sf <- st_buffer(tfl_jub_sf, dist = 50)
# Count number of crimes recorded within each buffer.
osm_jub_sf <- osm_buff_sf %>%
mutate(crimes = lengths(st_intersects(osm_buff_sf, btp_sf)))
tfl_jub_sf <- tfl_buff_sf %>%
mutate(crimes = lengths(st_intersects(tfl_buff_sf, btp_sf)))
p1 <- ggplot(data = osm_jub_sf) +
geom_sf(mapping = aes(color = crimes), size = 2) +
labs(title = "Open Street Map") +
scale_color_viridis_c()
p2 <- ggplot(data = tfl_jub_sf) +
geom_sf(mapping = aes(color = crimes), size = 2) +
labs(title = "Transport for London") +
scale_color_viridis_c()
p1 / p2
# Chunk 1: setup
knitr::opts_chunk$set(echo = T, message = F, warning = F)
# library(jsonlite)
# library(osmdata)
# library(ggplot2)
# library(sf)
# library(readr)
# library(tidyr)
# library(patchwork)
# library(dplyr)
# Chunk 2: crimeload1
library(readr)
btp_df <- read_csv("data/2020-01-btp-street.csv")
# Chunk 4: tfl
knitr::include_graphics("img/tfl_screenshot.png")
# Chunk 5: getapi
library(jsonlite)
api_call <- fromJSON(readLines("https://api.tfl.gov.uk/line/jubilee/stoppoints"))
# Chunk 6: bb
library(osmdata)
bb_sf <- getbb(place_name = "greater london united kingdom", format_out = "sf_polygon")
# Chunk 7: bbmanual
bb_gl <- c(-0.5103751, 51.2867602, 0.3340155, 51.6918741) # xmin, ymin, xmax, ymax
# Chunk 8: opq
osm_stat_sf <- opq(bbox = bb_gl) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf()                                                     # specify class
# Chunk 9: printstations
osm_stat_sf
# Chunk 10: stationpoints
osm_stat_sf <- osm_stat_sf$osm_points
# Chunk 11: valuesofline
table(osm_stat_sf$line)
library(dplyr)
osm_jub_sf <- osm_stat_sf %>%
filter(grepl("Jubilee", line))
osm_stat_sf %>%
filter(grepl("Jubilee", line))
class(osm_stat_sf)
plot(st_geometry(osm_stat_sf))
library(sf)
library(dplyr)
osm_jub_sf <- osm_stat_sf %>%
filter(grepl("Jubilee", line))
# Chunk 1: setup
knitr::opts_chunk$set(echo = T, message = F, warning = F)
# library(jsonlite)
# library(osmdata)
# library(ggplot2)
# library(sf)
# library(readr)
# library(tidyr)
# library(patchwork)
# library(dplyr)
# Chunk 2: crimeload1
library(readr)
btp_df <- read_csv("data/2020-01-btp-street.csv")
# Chunk 4: tfl
knitr::include_graphics("img/tfl_screenshot.png")
# Chunk 5: getapi
library(jsonlite)
api_call <- fromJSON(readLines("https://api.tfl.gov.uk/line/jubilee/stoppoints"))
# Chunk 6: bb
library(osmdata)
library(sf)
bb_sf <- getbb(place_name = "greater london united kingdom", format_out = "sf_polygon")
# Chunk 7: bbmanual
bb_gl <- c(-0.51037, 51.28676, 0.33401, 51.69187) # xmin, ymin, xmax, ymax
osm_stat_sf <- opq(bbox = bb_gl) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf()                                                     # specify class
plot(st_geometry(osm_stat_sf))
liblibrary)
library(sf)
plot(st_geometry(osm_stat_sf))
osm_stat_sf
osm_stat_sf <- osm_stat_sf$osm_points
plot(st_geometry(osm_stat_sf))
p1 <- ggplot(data = osm_jub_sf) +
geom_sf(mapping = aes(color = crimes), size = 2) +
labs(title = "Open Street Map") +
scale_color_viridis_c(lim = c(0,42))
p2 <- ggplot(data = tfl_jub_sf) +
geom_sf(mapping = aes(color = crimes), size = 2) +
labs(title = "Transport for London") +
scale_color_viridis_c(lim = c(0,42))
p1 / p2
# Chunk 1: setup
knitr::opts_chunk$set(echo = T, message = F, warning = F)
# library(jsonlite)
# library(osmdata)
# library(ggplot2)
# library(sf)
# library(readr)
# library(tidyr)
# library(patchwork)
# library(dplyr)
# Chunk 2: crimeload1
library(readr)
btp_df <- read_csv("data/2020-01-btp-street.csv")
# Chunk 4: tfl
knitr::include_graphics("img/tfl_screenshot.png")
# Chunk 5: getapi
library(jsonlite)
api_call <- fromJSON(readLines("https://api.tfl.gov.uk/line/jubilee/stoppoints"))
# Chunk 6: bb
library(osmdata)
library(sf)
bb_sf <- getbb(place_name = "greater london united kingdom", format_out = "sf_polygon")
# Chunk 7: bbmanual
bb_gl <- c(-0.51037, 51.28676, 0.33401, 51.69187) # xmin, ymin, xmax, ymax
# Chunk 8: opq
osm_stat_sf <- opq(bbox = bb_gl) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf()                                                     # specify class
# Chunk 9: printstations
osm_stat_sf
# Chunk 10: stationpoints
osm_stat_sf <- osm_stat_sf$osm_points
# Chunk 12: filterline
library(dplyr)
osm_jub_sf <- osm_stat_sf %>%
filter(grepl("Jubilee", line))
# Chunk 13: packages
library(ggplot2)
library(sf)
library(tidyr)
library(patchwork)
# Chunk 14: apispatial
tfl_jub_sf <- api_call %>%
select(commonName, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
# Chunk 15: tflmap
ggplot(tfl_jub_sf) +
geom_sf()
# Chunk 16: mapline
ggplot() +
geom_sf(data = tfl_jub_sf) +
geom_sf(data = osm_jub_sf, color = "red", alpha = 0.5)
# Chunk 17: crimespatial
btp_sf <- btp_df %>%
drop_na(Longitude, Latitude) %>%
st_as_sf(coords = c(x = "Longitude", y = "Latitude"), crs = 4326) %>%
st_transform(27700)
# Chunk 18: buffer
# Ensure the same CRS (BNG, 27700).
osm_jub_sf <- st_transform(osm_jub_sf, st_crs(tfl_jub_sf))
# Create buffers to define 'in and around'.
osm_buff_sf <- st_buffer(osm_jub_sf, dist = 50)
tfl_buff_sf <- st_buffer(tfl_jub_sf, dist = 50)
# Count number of crimes recorded within each buffer.
osm_jub_sf <- osm_buff_sf %>%
mutate(crimes = lengths(st_intersects(osm_buff_sf, btp_sf)))
tfl_jub_sf <- tfl_buff_sf %>%
mutate(crimes = lengths(st_intersects(tfl_buff_sf, btp_sf)))
p1 <- ggplot(data = osm_jub_sf) +
geom_sf(mapping = aes(color = crimes), size = 2) +
labs(title = "Open Street Map") +
scale_color_viridis_c(lim = c(0,42))
p2 <- ggplot(data = tfl_jub_sf) +
geom_sf(mapping = aes(color = crimes), size = 2) +
labs(title = "Transport for London") +
scale_color_viridis_c(lim = c(0,42))
p1 + p2
