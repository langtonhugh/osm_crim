add_osm_feature(key = 'public_transport', value = 'station') %>%           # select features
osmdata_sf()                                                               # specify class (sf or sp)
# trim_osmdata(bb_poly = bb_sf)                                           # trim by bounding box
# View contents.
osm_stat_sf
# Extract points only.
temp <- osm_stat_sf$osm_polygons
osm_stat_sf <- osm_stat_sf$osm_points
# Check the network tags.
table(osm_stat_sf$line)
# Filter jubern line only/
osm_jub_sf <- osm_stat_sf %>%
mutate(tube_line = line) %>%
filter(str_detect(tube_line, "Jubilee"))
osm_jub_sf <- st_transform(osm_jub_sf, 27700)
# bb_sf      <- st_transform(bb_sf, 27700)
ggplot() +
geom_sf(data = osm_jub_sf, size = 0.8)
# TfL scrape ==============================================================================================
# Scape jubern line locations from TfL. Warning is fine.
api_call <- fromJSON(readLines("https://api.tfl.gov.uk/line/jubilee/stoppoints"))
# Extract bus stop names and the lat-long coordinates, transform to BNG.
tfl_jub_sf <- api_call %>%
select(commonName, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
# Plot difference.
ggplot() +
geom_sf(data = osm_jub_sf) +
geom_sf(data = tfl_jub_sf, color = "red", alpha = 0.5)
# Save before someone changes the lines.
# temp_osm_jub_sf <- osm_jub_sf %>%
#   select(name, geometry)
#
# st_write(obj = temp_osm_jub_sf, dsn = "data/jubilee_osm.shp")
# st_write(obj = tfl_jub_sf, dsn = "data/jubilee_tfl.shp")
# Assessing the impact in terms of crime. BTP data in January 2020.
btp_df <- read_csv("data/2020-01-btp-street.csv")
# Make spatial.
btp_sf <- btp_df %>%
drop_na(Longitude, Latitude) %>%
st_as_sf(coords = c(x = "Longitude", y = "Latitude"), crs = 4326) %>%
st_transform(27700)
# st_intersection(bb_sf)
# Create buffers to define 'in and around'.
osm_buff_sf <- st_buffer(osm_jub_sf, dist = 50)
tfl_buff_sf <- st_buffer(tfl_jub_sf, dist = 50)
# Aggregate to each station.
osm_jub_sf <- osm_buff_sf %>%
mutate(crimes = lengths(st_intersects(osm_buff_sf, btp_sf)))
tfl_jub_sf <- tfl_buff_sf %>%
mutate(crimes = lengths(st_intersects(tfl_buff_sf, btp_sf)))
# Map out difference.
p1 <- ggplot(data = osm_jub_sf) +
geom_sf(mapping = aes(colour = crimes), size = 3) +
labs(title = "Open Street Map") +
scale_colour_viridis_c(lim = c(0,42))
p2 <- ggplot(data = tfl_jub_sf) +
geom_sf(mapping = aes(colour = crimes), size = 3) +
labs(title = "Transport for London") +
scale_colour_viridis_c(lim = c(0,42))
p1 / p2
sum(osm_jub_sf$crimes) # 168
sum(tfl_jub_sf$crimes) # 136
# Which is the crime hotspot at the end of the line?
osm_jub_sf %>%
arrange(desc(crimes)) %>%
slice(1) %>%
pull(name)
# Straford.
# let's plot a comparison map of this station location. We can get building footprints.
stratford_osm_sf <- osm_jub_sf %>%
arrange(desc(crimes)) %>%
slice(1)
stratford_osm_sf <- osm_jub_sf %>%
filter(name == "Stratford")
# Get the TFL Stratford buffer (no crimes captured).
stratford_tfl_sf <- tfl_jub_sf %>%
filter(commonName == "Stratford Underground Station")
# extract bb of stratford to create a mini study region.
bb_sf <- stratford_osm_sf %>%
st_transform(crs = 4326) %>%
st_bbox()
# Retrieve coordinates into list.
strat_bb <- c(bb_sf[[1]], bb_sf[[2]], bb_sf[[3]], bb_sf[[4]])
# Get building footprints.
strat_fp_sf <- opq(strat_bb) %>%
add_osm_feature(key = 'building') %>%
osmdata_sf()
# Polygons only. We can see from the 'building' description that this is the train station.
strat_fp_poly_sf <- strat_fp_sf$osm_polygons
# Save them.
# st_write(obj = strat_fp_poly_sf, dsn = "data/stratford_osm.shp")
# Get the crimes that OSM managed to capture.
strat_osm_btp_sf <- st_intersection(stratford_osm_sf, btp_sf)
# Make WGS 84 to match OSM data.
strat_fp_poly_sf <- st_transform(strat_fp_poly_sf, 27700)
strat_fp_poly_sf
table(strat_fp_poly_sf$building)
table(strat_fp_poly_sf$building.levels)
table(strat_fp_poly_sf$layer)
View(strat_fp_poly_sf)
ggplot(strat_fp_poly_sf) geom+sf(aes(fill = building.levels))
ggplot(strat_fp_poly_sf) + geom_sf(aes(fill = building.levels))
ggplot(strat_fp_poly_sf) + geom_sf(aes(fill = building))
library(jsonlite)
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(dplyr)
library(tidyr)
library(purrr)
library(patchwork)
library(stringr)
# OSM query ==============================================================================================
# All queries begin with a bounding box specification i.e. the study region.
# This can be obtained manually, which requires some existing knowledge about
# an area using the latitude and longitude coordinates, but it is generally
# easier to use a search term. For instance
# no longer works.
# bb_sf <- getbb(place_name = "Greater London United Kingdom", format_out = "sf_polygon")
bb_gl <- c(-0.51037, 51.28676, 0.33401, 51.69187)
osm_stat_sf <- opq(bbox = bb_gl) %>% # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>%           # select features
osmdata_sf()                                                               # specify class (sf or sp)
# trim_osmdata(bb_poly = bb_sf)                                           # trim by bounding box
# View contents.
osm_stat_sf
# Extract points only.
temp <- osm_stat_sf$osm_polygons
osm_stat_sf <- osm_stat_sf$osm_points
# Check the network tags.
table(osm_stat_sf$line)
# Filter jubern line only/
osm_jub_sf <- osm_stat_sf %>%
mutate(tube_line = line) %>%
filter(str_detect(tube_line, "Jubilee"))
osm_jub_sf <- st_transform(osm_jub_sf, 27700)
# bb_sf      <- st_transform(bb_sf, 27700)
ggplot() +
geom_sf(data = osm_jub_sf, size = 0.8)
# TfL scrape ==============================================================================================
# Scape jubern line locations from TfL. Warning is fine.
api_call <- fromJSON(readLines("https://api.tfl.gov.uk/line/jubilee/stoppoints"))
# Extract bus stop names and the lat-long coordinates, transform to BNG.
tfl_jub_sf <- api_call %>%
select(commonName, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
# Plot difference.
ggplot() +
geom_sf(data = osm_jub_sf) +
geom_sf(data = tfl_jub_sf, color = "red", alpha = 0.5)
# Save before someone changes the lines.
# temp_osm_jub_sf <- osm_jub_sf %>%
#   select(name, geometry)
#
# st_write(obj = temp_osm_jub_sf, dsn = "data/jubilee_osm.shp")
# st_write(obj = tfl_jub_sf, dsn = "data/jubilee_tfl.shp")
# Assessing the impact in terms of crime. BTP data in January 2020.
btp_df <- read_csv("data/2020-01-btp-street.csv")
# Make spatial.
btp_sf <- btp_df %>%
drop_na(Longitude, Latitude) %>%
st_as_sf(coords = c(x = "Longitude", y = "Latitude"), crs = 4326) %>%
st_transform(27700)
# st_intersection(bb_sf)
# Create buffers to define 'in and around'.
osm_buff_sf <- st_buffer(osm_jub_sf, dist = 50)
tfl_buff_sf <- st_buffer(tfl_jub_sf, dist = 50)
# Aggregate to each station.
osm_jub_sf <- osm_buff_sf %>%
mutate(crimes = lengths(st_intersects(osm_buff_sf, btp_sf)))
tfl_jub_sf <- tfl_buff_sf %>%
mutate(crimes = lengths(st_intersects(tfl_buff_sf, btp_sf)))
# Map out difference.
p1 <- ggplot(data = osm_jub_sf) +
geom_sf(mapping = aes(colour = crimes), size = 3) +
labs(title = "Open Street Map") +
scale_colour_viridis_c(lim = c(0,42))
p2 <- ggplot(data = tfl_jub_sf) +
geom_sf(mapping = aes(colour = crimes), size = 3) +
labs(title = "Transport for London") +
scale_colour_viridis_c(lim = c(0,42))
p1 / p2
sum(osm_jub_sf$crimes) # 168
sum(tfl_jub_sf$crimes) # 136
# Which is the crime hotspot at the end of the line?
osm_jub_sf %>%
arrange(desc(crimes)) %>%
slice(1) %>%
pull(name)
# Straford.
# let's plot a comparison map of this station location. We can get building footprints.
stratford_osm_sf <- osm_jub_sf %>%
arrange(desc(crimes)) %>%
slice(1)
stratford_osm_sf <- osm_jub_sf %>%
filter(name == "Stratford")
# Get the TFL Stratford buffer (no crimes captured).
stratford_tfl_sf <- tfl_jub_sf %>%
filter(commonName == "Stratford Underground Station")
# extract bb of stratford to create a mini study region.
bb_sf <- stratford_osm_sf %>%
st_transform(crs = 4326) %>%
st_bbox()
# Retrieve coordinates into list.
strat_bb <- c(bb_sf[[1]], bb_sf[[2]], bb_sf[[3]], bb_sf[[4]])
# Get building footprints.
strat_fp_sf <- opq(strat_bb) %>%
add_osm_feature(key = 'building') %>%
osmdata_sf()
# Polygons only. We can see from the 'building' description that this is the train station.
strat_fp_poly_sf <- strat_fp_sf$osm_polygons
# Save them.
# st_write(obj = strat_fp_poly_sf, dsn = "data/stratford_osm.shp")
# Get the crimes that OSM managed to capture.
strat_osm_btp_sf <- st_intersection(stratford_osm_sf, btp_sf)
# Make WGS 84 to match OSM data.
strat_fp_poly_sf <- st_transform(strat_fp_poly_sf, 27700)
# Quick plot.
strat_gg <- ggplot() +
# theme_bw() +
geom_sf(data = strat_fp_poly_sf, fill = "black") +
geom_sf(data = stratford_osm_sf, fill = "pink", alpha = 0.3) +
geom_sf(data = stratford_tfl_sf, fill = "blue", alpha = 0.3) +
geom_sf(data = strat_osm_btp_sf, col = "Red") +
theme(axis.text = element_text(size = 6))
strat_gg
# Quick plot.
strat_gg <- ggplot() +
# theme_bw() +
geom_sf(data = strat_fp_poly_sf, fill = "black") +
geom_sf(data = stratford_osm_sf, fill = "pink", alpha = 0.3) +
geom_sf(data = stratford_tfl_sf, fill = "blue", alpha = 0.3) +
geom_sf(data = strat_osm_btp_sf, col = "Red", fill = "white") +
theme(axis.text = element_text(size = 6))
strat_gg
# Quick plot.
strat_gg <- ggplot() +
# theme_bw() +
geom_sf(data = strat_fp_poly_sf, fill = "black") +
geom_sf(data = stratford_osm_sf, fill = "pink", alpha = 0.3) +
geom_sf(data = stratford_tfl_sf, fill = "blue", alpha = 0.3) +
geom_sf(data = strat_osm_btp_sf, col = "Yellow", fill = "white") +
theme(axis.text = element_text(size = 6))
strat_gg
ggsave(plot = strat_gg, file = "img/stratford.png", width = 12, height = 14, unit = "cm")
# Quick plot.
strat_gg <- ggplot() +
# theme_bw() +
geom_sf(data = strat_fp_poly_sf, fill = "black") +
geom_sf(data = stratford_osm_sf, fill = "pink", alpha = 0.3) +
geom_sf(data = stratford_tfl_sf, fill = "blue", alpha = 0.3) +
geom_sf(data = strat_osm_btp_sf, col = "white", fill = "white") +
theme(axis.text = element_text(size = 6))
strat_gg
ggsave(plot = strat_gg, file = "img/stratford.png", width = 12, height = 14, unit = "cm")
RColorBrewer::brewer.pal(8, "Set1")
RColorBrewer::brewer.pal(8, "viridis")
library(scales)
show_col(viridis_pal()(20))
library(scales)
viridis_pal()(20)
# Quick plot.
strat_gg <- ggplot() +
# theme_bw() +
geom_sf(data = strat_fp_poly_sf, fill = "black") +
geom_sf(data = stratford_osm_sf, fill = "#FDE725FF", alpha = 0.3) +
geom_sf(data = stratford_tfl_sf, fill = "#440154FF", alpha = 0.3) +
geom_sf(data = strat_osm_btp_sf, col = "#3CBC75FF", fill = "white") +
theme(axis.text = element_text(size = 6))
strat_gg
# Quick plot.
strat_gg <- ggplot() +
# theme_bw() +
geom_sf(data = strat_fp_poly_sf, fill = "black") +
geom_sf(data = stratford_osm_sf, fill = "#FDE725FF", alpha = 0.4) +
geom_sf(data = stratford_tfl_sf, fill = "#440154FF", alpha = 0.3) +
geom_sf(data = strat_osm_btp_sf, col = "#3CBC75FF", fill = "white") +
theme(axis.text = element_text(size = 6))
strat_gg
# Quick plot.
strat_gg <- ggplot() +
# theme_bw() +
geom_sf(data = strat_fp_poly_sf, fill = "black") +
geom_sf(data = stratford_osm_sf, fill = "#FDE725FF", alpha = 0.5) +
geom_sf(data = stratford_tfl_sf, fill = "#440154FF", alpha = 0.3) +
geom_sf(data = strat_osm_btp_sf, col = "#3CBC75FF", fill = "white") +
theme(axis.text = element_text(size = 6))
strat_gg
# Quick plot.
strat_gg <- ggplot() +
# theme_bw() +
geom_sf(data = strat_fp_poly_sf, fill = "black") +
geom_sf(data = stratford_osm_sf, fill = "#FDE725FF", alpha = 0.5) +
geom_sf(data = stratford_tfl_sf, fill = "#3CBC75FF", alpha = 0.3) +
geom_sf(data = strat_osm_btp_sf, col = "#440154FF", fill = "white") +
theme(axis.text = element_text(size = 6))
strat_gg
# Quick plot.
strat_gg <- ggplot() +
# theme_bw() +
geom_sf(data = strat_fp_poly_sf, fill = "black") +
geom_sf(data = stratford_osm_sf, fill = "#FDE725FF", alpha = 0.5) +
geom_sf(data = stratford_tfl_sf, fill = "#440154FF", alpha = 0.3) +
geom_sf(data = strat_osm_btp_sf, col = "#3CBC75FF", fill = "white") +
theme(axis.text = element_text(size = 6))
strat_gg
ggsave(plot = strat_gg, file = "img/stratford.png", width = 12, height = 14, unit = "cm")
library(scales)
viridis_pal(option = "A")(20)
library(scales)
show_col(viridis_pal("A")(20))
library(scales)
show_col(viridis_pal(option = "A")(20))
ggplot() +
geom_sf(data = strat_fp_poly_sf, fill = "black") +
geom_sf(data = stratford_osm_sf, fill = "#440154FF", alpha = 0.5) +
geom_sf(data = stratford_tfl_sf, fill = "#FDE725FF", alpha = 0.3) +
geom_sf(data = strat_osm_btp_sf, col = "#3CBC75FF", fill = "white") +
theme(axis.text = element_text(size = 6))
# Quick plot.
strat_gg <- ggplot() +
geom_sf(data = strat_fp_poly_sf, fill = "black") +
geom_sf(data = stratford_osm_sf, fill = "#440154FF", alpha = 0.3) +
geom_sf(data = stratford_tfl_sf, fill = "#FDE725FF", alpha = 0.3) +
geom_sf(data = strat_osm_btp_sf, col = "#3CBC75FF", fill = "white") +
theme(axis.text = element_text(size = 6))
strat_gg
ggsave(plot = strat_gg, file = "img/stratford.png", width = 12, height = 14, unit = "cm")
ggplot() +
geom_sf(data = tfl_jub_sf) +
geom_sf(data = osm_jub_sf, color = "yellow", alpha = 0.5)
ggplot() +
geom_sf(data = tfl_jub_sf) +
geom_sf(data = osm_jub_sf, fill = "yellow", alpha = 0.5)
ggplot() +
geom_sf(data = tfl_jub_sf) +
geom_sf(data = osm_jub_sf, col = "red", alpha = 0.5)
citation("readr")
citation("jsonlite")
citation("osmdata")
citation("sf")
citation("dplter")
citation("dplyr")
citation("ggplot2")
citation("tidyr")
citation("patchwork")
citation("rmarkdown")
?toBibtex
test <- citation("rmarkdown")
toBibtex(test)
library(jsonlite)
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(dplyr)
library(tidyr)
library(purrr)
library(patchwork)
library(stringr)
# OSM query ==============================================================================================
# All queries begin with a bounding box specification i.e. the study region.
# This can be obtained manually, which requires some existing knowledge about
# an area using the latitude and longitude coordinates, but it is generally
# easier to use a search term. For instance
# no longer works.
# bb_sf <- getbb(place_name = "Greater London United Kingdom", format_out = "sf_polygon")
bb_gl <- c(-0.51037, 51.28676, 0.33401, 51.69187)
osm_stat_sf <- opq(bbox = bb_gl) %>% # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>%           # select features
osmdata_sf()                                                               # specify class (sf or sp)
# trim_osmdata(bb_poly = bb_sf)                                           # trim by bounding box
# View contents.
osm_stat_sf
# Extract points only.
temp <- osm_stat_sf$osm_polygons
osm_stat_sf <- osm_stat_sf$osm_points
# Check the network tags.
table(osm_stat_sf$line)
# Filter jubern line only/
osm_jub_sf <- osm_stat_sf %>%
mutate(tube_line = line) %>%
filter(str_detect(tube_line, "Jubilee"))
osm_jub_sf <- st_transform(osm_jub_sf, 27700)
# bb_sf      <- st_transform(bb_sf, 27700)
plot_1 <- ggplot() +
geom_sf(data = osm_jub_sf, size = 0.8)
ggsave(plot = plot_1, filename = "img/fig1.eps", dpi = 1200)
?ggsave
ggsave(plot = plot_1, filename = "img/fig1", device = "eps", dpi = 1200)
ggsave(plot = plot_1, filename = "img/fig1", device = "eps", dpi = 1200)
ggsave(plot = plot_1, filename = "img/fig1", device = "eps", dpi = 1200)
ggsave(plot = plot_1, filename = "img/fig1", device = "TIFF", dpi = 1200)
ggsave(plot = plot_1, filename = "img/fig1", device = "TIF", dpi = 1200)
ggsave(plot = plot_1, filename = "img/fig1", device = "tiff", dpi = 1200)
ggsave(plot = plot_1, filename = "img/fig1", device = "tiff", dpi = 1200)
ggsave(plot = plot_1, filename = "img/fig1.tiff", device = "tiff", dpi = 1200)
ggsave(plot = plot_1, filename = "img/fig1.eps", device = "eps", dpi = 1200)
# TfL scrape ==============================================================================================
# Scape jubern line locations from TfL. Warning is fine.
api_call <- fromJSON(readLines("https://api.tfl.gov.uk/line/jubilee/stoppoints"))
# Extract bus stop names and the lat-long coordinates, transform to BNG.
tfl_jub_sf <- api_call %>%
select(commonName, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
# Plot difference.
plot_2 <- ggplot() +
geom_sf(data = osm_jub_sf) +
geom_sf(data = tfl_jub_sf, color = "red", alpha = 0.5)
ggsave(plot = plot_1, filename = "img/fig1.tiff", device = "tiff", dpi = 1200, height = 7, width = 7)
ggsave(plot = plot_2, filename = "img/fig2.tiff", device = "tiff", dpi = 1200, height = 7, width = 7)
# Save before someone changes the lines.
# temp_osm_jub_sf <- osm_jub_sf %>%
#   select(name, geometry)
#
# st_write(obj = temp_osm_jub_sf, dsn = "data/jubilee_osm.shp")
# st_write(obj = tfl_jub_sf, dsn = "data/jubilee_tfl.shp")
# Assessing the impact in terms of crime. BTP data in January 2020.
btp_df <- read_csv("data/2020-01-btp-street.csv")
# Make spatial.
btp_sf <- btp_df %>%
drop_na(Longitude, Latitude) %>%
st_as_sf(coords = c(x = "Longitude", y = "Latitude"), crs = 4326) %>%
st_transform(27700)
# st_intersection(bb_sf)
# Create buffers to define 'in and around'.
osm_buff_sf <- st_buffer(osm_jub_sf, dist = 50)
tfl_buff_sf <- st_buffer(tfl_jub_sf, dist = 50)
# Aggregate to each station.
osm_jub_sf <- osm_buff_sf %>%
mutate(crimes = lengths(st_intersects(osm_buff_sf, btp_sf)))
tfl_jub_sf <- tfl_buff_sf %>%
mutate(crimes = lengths(st_intersects(tfl_buff_sf, btp_sf)))
# Map out difference.
p1 <- ggplot(data = osm_jub_sf) +
geom_sf(mapping = aes(colour = crimes), size = 3) +
labs(title = "Open Street Map") +
scale_colour_viridis_c(lim = c(0,42))
p2 <- ggplot(data = tfl_jub_sf) +
geom_sf(mapping = aes(colour = crimes), size = 3) +
labs(title = "Transport for London") +
scale_colour_viridis_c(lim = c(0,42))
p12 <- p1 / p2
plot_3 <- p1 / p2
plot_3 <- p1 / p2
plot_3 <- p1 / p2
ggsave(plot = plot_3, filename = "img/fig3.tiff", device = "tiff", dpi = 1200, height = 10, width = 7)
ggsave(plot = plot_3, filename = "img/fig3.tiff", device = "tiff", dpi = 1200, height = 12, width = 7)
ggsave(plot = plot_3, filename = "img/fig3.tiff", device = "tiff", dpi = 1200, height = 7, width = 7)
sum(osm_jub_sf$crimes) # 168
sum(tfl_jub_sf$crimes) # 136
# Which is the crime hotspot at the end of the line?
osm_jub_sf %>%
arrange(desc(crimes)) %>%
slice(1) %>%
pull(name)
# Straford.
# let's plot a comparison map of this station location. We can get building footprints.
stratford_osm_sf <- osm_jub_sf %>%
arrange(desc(crimes)) %>%
slice(1)
stratford_osm_sf <- osm_jub_sf %>%
filter(name == "Stratford")
# Get the TFL Stratford buffer (no crimes captured).
stratford_tfl_sf <- tfl_jub_sf %>%
filter(commonName == "Stratford Underground Station")
# extract bb of stratford to create a mini study region.
bb_sf <- stratford_osm_sf %>%
st_transform(crs = 4326) %>%
st_bbox()
# Retrieve coordinates into list.
strat_bb <- c(bb_sf[[1]], bb_sf[[2]], bb_sf[[3]], bb_sf[[4]])
# Get building footprints.
strat_fp_sf <- opq(strat_bb) %>%
add_osm_feature(key = 'building') %>%
osmdata_sf()
# Polygons only. We can see from the 'building' description that this is the train station.
strat_fp_poly_sf <- strat_fp_sf$osm_polygons
# Save them.
# st_write(obj = strat_fp_poly_sf, dsn = "data/stratford_osm.shp")
# Get the crimes that OSM managed to capture.
strat_osm_btp_sf <- st_intersection(stratford_osm_sf, btp_sf)
# Make WGS 84 to match OSM data.
strat_fp_poly_sf <- st_transform(strat_fp_poly_sf, 27700)
# Quick plot.
strat_gg <- ggplot() +
geom_sf(data = strat_fp_poly_sf, fill = "black") +
geom_sf(data = stratford_osm_sf, fill = "#440154FF", alpha = 0.3) +
geom_sf(data = stratford_tfl_sf, fill = "#FDE725FF", alpha = 0.3) +
geom_sf(data = strat_osm_btp_sf, col = "#3CBC75FF") +
theme(axis.text = element_text(size = 6))
strat_gg
# Quick plot.
plot_4 <- ggplot() +
geom_sf(data = strat_fp_poly_sf, fill = "black") +
geom_sf(data = stratford_osm_sf, fill = "#440154FF", alpha = 0.3) +
geom_sf(data = stratford_tfl_sf, fill = "#FDE725FF", alpha = 0.3) +
geom_sf(data = strat_osm_btp_sf, col = "#3CBC75FF") +
theme(axis.text = element_text(size = 6))
ggsave(plot = plot_4, filename = "img/fig4.tiff", device = "tiff", dpi = 1200, height = 7, width = 7)
ggsave(plot = plot_1, filename = "img/fig2.tiff", device = "tiff", dpi = 1200, height = 7, width = 7)
ggsave(plot = plot_2, filename = "img/fig3.tiff", device = "tiff", dpi = 1200, height = 7, width = 7)
ggsave(plot = plot_3, filename = "img/fig4.tiff", device = "tiff", dpi = 1200, height = 7, width = 7)
ggsave(plot = plot_4, filename = "img/fig5.tiff", device = "tiff", dpi = 1200, height = 7, width = 7)
5000000/50000
50000/5000000
0.01*100
