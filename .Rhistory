library(patchwork)
# Chunk 2
library(jsonlite)
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(dplyr)
library(tidyr)
library(purrr)
library(patchwork)
# Chunk 3: tfl
knitr::include_graphics("img/tfl_screenshot.png")
# Chunk 4: getapi
api_call <- fromJSON(readLines("https://api.tfl.gov.uk/line/northern/stoppoints"))
# Chunk 5: apispatial
tfl_north_sf <- api_call %>%
select(commonName, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
# Chunk 6: tflmap
ggplot(tfl_north_sf) +
geom_sf()
# Chunk 7
bb_sf <- getbb(place_name = "greater london united kingdom", format_out = "sf_polygon")
# Chunk 8
ggplot(data = bb_sf) +
geom_sf()
# Chunk 9
osm_stat_sf <- opq(bbox = bb_sf) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf() %>%                                                 # specify class
trim_osmdata(bb_poly = bb_sf)                                    # trim by bounding box
# Chunk 10
osm_stat_sf
# Chunk 11
osm_stat_sf <- osm_stat_sf$osm_points
# Chunk 13
osm_north_sf <- osm_stat_sf %>%
filter(line == "Northern")
# Chunk 14
ggplot() +
geom_sf(data = tfl_north_sf) +
geom_sf(data = osm_north_sf, color = "red", alpha = 0.5)
# Chunk 15
btp_df <- read_csv("data/2020-01-btp-street.csv")
# Chunk 16
# First, project the study region boundaries.
bb_sf <- st_transform(bb_sf, 27700)
# Then, make the police data spatial, and clip.
btp_sf <- btp_df %>%
drop_na(Longitude, Latitude) %>%
st_as_sf(coords = c(x = "Longitude", y = "Latitude"), crs = 4326) %>%
st_transform(27700) %>%
st_intersection(bb_sf)
# Chunk 17
# Assign the same CRS.
osm_north_sf <- st_transform(osm_north_sf, 27700)
tfl_north_sf <- st_transform(tfl_north_sf, 27700)
# Create buffers to define 'in and around'.
osm_buff_sf <- st_buffer(osm_north_sf, dist = 50)
tfl_buff_sf <- st_buffer(tfl_north_sf, dist = 50)
# Count number of crimes recorded within each buffer.
osm_north_sf <- osm_buff_sf %>%
mutate(crimes = lengths(st_intersects(osm_buff_sf, btp_sf)))
tfl_north_sf <- tfl_buff_sf %>%
mutate(crimes = lengths(st_intersects(tfl_buff_sf, btp_sf)))
p1 <- ggplot(data = osm_north_sf) +
geom_sf(mapping = aes(colour = crimes), size = 2) +
labs(title = "Open Street Map") +
scale_colour_viridis_c()
p2 <- ggplot(data = tfl_north_sf) +
geom_sf(mapping = aes(colour = crimes), size = 2) +
labs(title = "Transport for London") +
scale_colour_viridis_c()
p1 + p2
p <- arrange(osm_north_sf, crimes)
p <- arrange(osm_north_sf, crimes)
View(p)
View(tfl_north_sf)
# Chunk 1: setup
knitr::opts_chunk$set(echo = T, message = F, warning = F)
library(jsonlite)
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(dplyr)
library(tidyr)
library(patchwork)
# Chunk 2: packages
library(jsonlite)
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(dplyr)
library(tidyr)
library(patchwork)
# Chunk 3: tfl
knitr::include_graphics("img/tfl_screenshot.png")
?fromJSON
api_call <- fromJSON(txt = readLines("https://api.tfl.gov.uk/line/northern/stoppoints"))
osm_stat_sf <- opq(bbox = bb_sf) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf() %>%                                                 # specify class
trim_osmdata(bb_poly = bb_sf)                                    # trim by bounding box
# Chunk 1: setup
knitr::opts_chunk$set(echo = T, message = F, warning = F)
library(jsonlite)
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(dplyr)
library(tidyr)
library(patchwork)
# Chunk 2: packages
library(jsonlite)
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(dplyr)
library(tidyr)
library(patchwork)
# Chunk 3: tfl
knitr::include_graphics("img/tfl_screenshot.png")
# Chunk 4: getapi
api_call <- fromJSON(txt = readLines("https://api.tfl.gov.uk/line/northern/stoppoints"))
# Chunk 5: apispatial
tfl_north_sf <- api_call %>%
select(commonName, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
# Chunk 6: tflmap
ggplot(tfl_north_sf) +
geom_sf()
# Chunk 7: bb
bb_sf <- getbb(place_name = "greater london united kingdom", format_out = "sf_polygon")
# Chunk 8: bbmap
ggplot(data = bb_sf) +
geom_sf()
osm_stat_sf <- opq(bbox = bb_sf) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf() %>%                                                 # specify class
trim_osmdata(bb_poly = bb_sf)                                    # trim by bounding box
osm_stat_sf
install.packages("patchwork")
library(jsonlite)
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(dplyr)
library(tidyr)
library(patchwork)
bb_sf <- getbb(place_name = "greater london united kingdom", format_out = "sf_polygon")
ggplot(data = bb_sf) +
geom_sf()
osm_stat_sf <- opq(bbox = bb_sf) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf() %>%                                                 # specify class
trim_osmdata(bb_poly = bb_sf)                                    # trim by bounding box
osm_stat_sf
osm_stat_sf <- osm_stat_sf$osm_points
osm_stat_sf %>%
as_tibble() %>%
group_by(network, line) %>%
tally() %>%
View()
osm_north_sf <- osm_stat_sf %>%
filter(grepl("Northern", line))
bb_sf <- getbb(place_name = "greater london", format_out = "sf_polygon")
osm_bike_sf <- opq(bbox = bb_sf) %>%
add_osm_feature(key = 'amenity', value = 'bicycle_rental') %>%
osmdata_sf() %>%
trim_osmdata(bb_poly = bb_sf)
osm_bike_sf <- osm_bike_sf$osm_points
View(osm_bike_sf)
btp_df <- read_csv("https://raw.githubusercontent.com/langtonhugh/osm_crim/master/data/2019-01-greater-manchester-street.csv")
library(readr)
btp_df <- read_csv("https://raw.githubusercontent.com/langtonhugh/osm_crim/master/data/2019-01-greater-manchester-street.csv")
View(head(btp_df))
library(rjson)
api_call <- fromJSON(txt = readLines("https://api.tfl.gov.uk/line/northern/stoppoints"))
api_call <- fromJSON(txt = readLines("https://api.tfl.gov.uk/line/northern/stoppoints"))
fromJSON(txt = readLines("https://api.tfl.gov.uk/line/northern/stoppoints"))
?fromJSON
api_call <- fromJSON(readLines("https://api.tfl.gov.uk/line/northern/stoppoints"))
View(api_call)
lapply(api_call, class)
??bb_sf
?getbb
??getbb
library(osmdata)
bb_sf <- getbb(place_name = "greater london united kingdom", format_out = "sf_polygon")
library(ggplot2)
library(sf)
ggplot(data = bb_sf) +
geom_sf()
osm_stat_sf <- opq(bbox = bb_sf) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf() %>%                                                 # specify class
trim_osmdata(bb_poly = bb_sf)                                    # trim by bounding box
osm_stat_sf <- opq(bbox = bb_sf) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf() %>%                                                 # specify class
trim_osmdata(bb_poly = bb_sf)                                    # trim by bounding box
handle_setopt(handle, http_version = 0L)
??handle_setopt
curl::handle_setopt(handle, http_version = 0L)
httr::set_config(httr::config(http_version = 0))
osm_stat_sf <- opq(bbox = bb_sf) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf() %>%                                                 # specify class
trim_osmdata(bb_poly = bb_sf)                                    # trim by bounding box
osm_stat_sf
osm_stat_sf <- osm_stat_sf$osm_points
names(osm_stat_sf)
osm_stat_sf %>% group_by(toilets) %>% count()
library(dplyr)
osm_stat_sf %>% group_by(toilets) %>% count()
osm_stat_sf %>% group_by(amenity) %>% count()
osm_stat_sf %>% group_by(fare_zone) %>% count()
osm_stat_sf %>% group_by(fare_zone) %>% count() %>% st_drop_geometry()
library(dplyr)
osm_stat_sf %>% group_by(fare_zone) %>% count() %>% st_drop_geometry() %>% arrange(-n)
You can see for most of these stations (`osm_stat_sf %>% group_by(fare_zone) %>% count() %>% st_drop_geometry() %>% filter(is.na(fare_zone)) %>% pull(n)`)
knitr::opts_chunk$set(echo = T, message = F, warning = F)
library(jsonlite)
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(dplyr)
library(tidyr)
library(patchwork)
osm_stat_sf %>% group_by(fare_zone) %>% count() %>% st_drop_geometry() %>% filter(is.na(fare_zone)) %>% pull(n)
osm_stat_sf %>% group_by(line) %>% count()
osm_stat_sf %>% group_by(line) %>% count() %>% View()
unique(osm_stat_sf$line)
osm_stat_sf %>% filter(line == "Northern City") %>% View()
osm_north_sf <- osm_stat_sf %>%
filter(grepl("Northern", line))
tfl_north_sf <- api_call %>%
select(commonName, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
tfl_north_sf <- api_call %>%
dplyr::select(commonName, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
tfl_north_sf <- api_call %>%
select(list(commonName), lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
api_call %>%
select(commonName, lat, lon)
You will notice that you see a list of lists, which is what we call nested lists. Another way of checking what sort of object this `api_call` object is is by looping the `class()` function through all the columns in the data frame using `lapply(api_call, class)`.
lapply(api_call, class)
unnest(api_call$commonName)
unnest(api_call)
api_call %>% unnest(commonName)
tfl_north_sf <- api_call %>%
select(commonName, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
ggplot(tfl_north_sf) +
geom_sf()
tfl_north_sf <- api_call[1] %>%
select(commonName, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
tfl_north_sf <- api_call %>%
as_data_frame() %>%
select(commonName, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
tfl_north_sf <- api_call %>%
as_tibble() %>%
select(commonName, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
install.packages(c("arm", "backports", "bayestestR", "blogdown", "bookdown", "boot", "broom", "carData", "class", "colourvalues", "dbplyr", "effectsize", "ellipsis", "emmeans", "ggeffects", "ggfortify", "ggspatial", "git2r", "glue", "haven", "insight", "KernSmooth", "lwgeom", "mapdeck", "maptools", "MASS", "mnormt", "modelr", "mosaic", "mosaicData", "nlme", "nnet", "parameters", "pdftools", "performance", "pillar", "pkgbuild", "ps", "purrr", "raster", "RcppArmadillo", "rematch2", "rex", "rgeos", "rlang", "scales", "sf", "sfheaders", "sjlabelled", "sjPlot", "sjstats", "skimr", "sp", "spatial", "spatstat", "textdata", "tibble", "tidyr", "tidyselect", "tidytext", "tinytex", "usethis", "vctrs", "vitae", "withr", "xfun", "xml2", "zoo"))
install.packages(c("arm", "backports", "bayestestR", "blogdown", "bookdown", "boot", "broom", "carData", "class", "colourvalues", "dbplyr", "effectsize", "ellipsis", "emmeans", "ggeffects", "ggfortify", "ggspatial", "git2r", "glue", "haven", "insight", "KernSmooth", "lwgeom", "mapdeck", "maptools", "MASS", "mnormt", "modelr", "mosaic", "mosaicData", "nlme", "nnet", "parameters", "pdftools", "performance", "pillar", "pkgbuild", "ps", "purrr", "raster", "RcppArmadillo", "rematch2", "rex", "rgeos", "rlang", "scales", "sf", "sfheaders", "sjlabelled", "sjPlot", "sjstats", "skimr", "sp", "spatial", "spatstat", "textdata", "tibble", "tidyr", "tidyselect", "tidytext", "tinytex", "usethis", "vctrs", "vitae", "withr", "xfun", "xml2", "zoo"))
install.packages(c("arm", "backports", "bayestestR", "blogdown", "bookdown", "boot", "broom", "carData", "class", "colourvalues", "dbplyr", "effectsize", "ellipsis", "emmeans", "ggeffects", "ggfortify", "ggspatial", "git2r", "glue", "haven", "insight", "KernSmooth", "lwgeom", "mapdeck", "maptools", "MASS", "mnormt", "modelr", "mosaic", "mosaicData", "nlme", "nnet", "parameters", "pdftools", "performance", "pillar", "pkgbuild", "ps", "purrr", "raster", "RcppArmadillo", "rematch2", "rex", "rgeos", "rlang", "scales", "sf", "sfheaders", "sjlabelled", "sjPlot", "sjstats", "skimr", "sp", "spatial", "spatstat", "textdata", "tibble", "tidyr", "tidyselect", "tidytext", "tinytex", "usethis", "vctrs", "vitae", "withr", "xfun", "xml2", "zoo"))
library(dplyr)
library(sf)
tfl_north_sf <- api_call %>%
as_tibble() %>%
select(commonName, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
tfl_north_sf <- api_call %>%
select(commonName, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
install.packages("rmarkdown")
library(readr)
btp_df <- read_csv("data/2020-01-btp-street.csv")
library(rjson)
api_call <- fromJSON(txt = readLines("https://api.tfl.gov.uk/line/northern/stoppoints"))
api_call <- fromJSON(readLines("https://api.tfl.gov.uk/line/northern/stoppoints"))
library(osmdata)
bb_sf <- getbb(place_name = "greater london united kingdom", format_out = "sf_polygon")
library(ggplot2)
library(sf)
ggplot(data = bb_sf) +
geom_sf()
osm_stat_sf <- opq(bbox = bb_sf) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf() %>%                                                 # specify class
trim_osmdata(bb_poly = bb_sf)                                    # trim by bounding box
library(curl)
osm_stat_sf <- opq(bbox = bb_sf) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf() %>%                                                 # specify class
trim_osmdata(bb_poly = bb_sf)                                    # trim by bounding box
curl::handle_setopt(handle, http_version = 0L)
httr::set_config(httr::config(http_version = 0))
osm_stat_sf <- opq(bbox = bb_sf) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf() %>%                                                 # specify class
trim_osmdata(bb_poly = bb_sf)                                    # trim by bounding box
osm_stat_sf
osm_stat_sf <- osm_stat_sf$osm_points
library(dplyr)
osm_stat_sf %>% group_by(fare_zone) %>% count() %>% st_drop_geometry() %>% arrange(-n)
unique(osm_stat_sf$line)
osm_north_sf <- osm_stat_sf %>%
filter(grepl("Northern", line))
library(tidyr)
library(patchwork)
tfl_north_sf <- api_call %>%
select(commonName, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
osm_stat_sf %>%
as_tibble() %>%
group_by(network, line) %>%
tally() %>%
View()
api_call[[1]]
api_call[[1]][1]
api_call[[1]][2]
api_call[[1]][3]
api_call[[1]][4]
api_call[[1]][5]
api_call[[1]][6]
api_call[[1]][7]
api_call[[1]][8]
api_call[[1]][9]
api_call[[1]][10]
api_call[[1]][11]
api_call[[1]][12]
api_call[[1]][commonName]
api_call[[1]]['commonName']
api_call[[]]['commonName']
api_call[[1:48]]['commonName']
length(api_call)
# First, project the study region boundaries.
bb_sf <- st_transform(bb_sf, 27700)
# Then, make the police data spatial, and clip.
btp_sf <- btp_df %>%
drop_na(Longitude, Latitude) %>%
st_as_sf(coords = c(x = "Longitude", y = "Latitude"), crs = 4326) %>%
st_transform(27700) %>%
st_intersection(bb_sf)
tfl_north_sf <- api_call %>%
select(commonName, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
install.packages("rjson")
knitr::opts_chunk$set(echo = T, message = F, warning = F)
library(jsonlite)
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(tidyr)
library(patchwork)
library(dplyr)
library(readr)
btp_df <- read_csv("data/2020-01-btp-street.csv")
btp_df <- read_csv("https://raw.githubusercontent.com/langtonhugh/osm_crim/master/data/2019-01-greater-manchester-street.csv")
knitr::include_graphics("img/tfl_screenshot.png")
library(rjson)
api_call <- fromJSON(readLines("https://api.tfl.gov.uk/line/northern/stoppoints"))
library(osmdata)
bb_sf <- getbb(place_name = "greater london united kingdom", format_out = "sf_polygon")
library(ggplot2)
library(sf)
ggplot(data = bb_sf) +
geom_sf()
osm_stat_sf <- opq(bbox = bb_sf) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf() %>%                                                 # specify class
trim_osmdata(bb_poly = bb_sf)                                    # trim by bounding box
osm_stat_sf
osm_stat_sf <- osm_stat_sf$osm_points
library(dplyr)
osm_stat_sf %>% group_by(fare_zone) %>% count() %>% st_drop_geometry() %>% arrange(-n)
osm_north_sf <- osm_stat_sf %>%
filter(grepl("Northern", line))
library(tidyr)
library(patchwork)
class(api_call)
View(api_call)
library(rjson)
api_call <- fromJSON(readLines("https://api.tfl.gov.uk/line/northern/stoppoints"))
View(api_call)
?fromJSON
api_call <- jsonlite::fromJSON(readLines("https://api.tfl.gov.uk/line/northern/stoppoints"))
class(api_call)
# Chunk 1: setup
knitr::opts_chunk$set(echo = T, message = F, warning = F)
library(jsonlite)
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(tidyr)
library(patchwork)
library(dplyr)
# Chunk 2: crimeload1
library(readr)
btp_df <- read_csv("data/2020-01-btp-street.csv")
# Chunk 4: tfl
knitr::include_graphics("img/tfl_screenshot.png")
library(rjson)
api_call <- jsonlite::fromJSON(readLines("https://api.tfl.gov.uk/line/northern/stoppoints"))
library(osmdata)
bb_sf <- getbb(place_name = "greater london united kingdom", format_out = "sf_polygon")
osm_stat_sf <- opq(bbox = bb_sf) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf() %>%                                                 # specify class
trim_osmdata(bb_poly = bb_sf)                                    # trim by bounding box
osm_stat_sf <- osm_stat_sf$osm_points
library(dplyr)
osm_stat_sf %>% group_by(fare_zone) %>% count() %>% st_drop_geometry() %>% arrange(-n)
unique(osm_stat_sf$line)
osm_north_sf <- osm_stat_sf %>%
filter(grepl("Northern", line))
library(tidyr)
library(patchwork)
tfl_north_sf <- api_call %>%
select(commonName, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
ggplot(tfl_north_sf) +
geom_sf()
ggplot() +
geom_sf(data = tfl_north_sf) +
geom_sf(data = osm_north_sf, color = "red", alpha = 0.5)
# First, project the study region boundaries.
bb_sf <- st_transform(bb_sf, 27700)
# Then, make the police data spatial, and clip.
btp_sf <- btp_df %>%
drop_na(Longitude, Latitude) %>%
st_as_sf(coords = c(x = "Longitude", y = "Latitude"), crs = 4326) %>%
st_transform(27700) %>%
st_intersection(bb_sf)
# Assign the same CRS.
osm_north_sf <- st_transform(osm_north_sf, 27700)
tfl_north_sf <- st_transform(tfl_north_sf, 27700)
# Create buffers to define 'in and around'.
osm_buff_sf <- st_buffer(osm_north_sf, dist = 50)
tfl_buff_sf <- st_buffer(tfl_north_sf, dist = 50)
# Count number of crimes recorded within each buffer.
osm_north_sf <- osm_buff_sf %>%
mutate(crimes = lengths(st_intersects(osm_buff_sf, btp_sf)))
tfl_north_sf <- tfl_buff_sf %>%
mutate(crimes = lengths(st_intersects(tfl_buff_sf, btp_sf)))
p1 <- ggplot(data = osm_north_sf) +
geom_sf(mapping = aes(color = crimes), size = 2) +
labs(title = "Open Street Map") +
scale_color_viridis_c()
p2 <- ggplot(data = tfl_north_sf) +
geom_sf(mapping = aes(color = crimes), size = 2) +
labs(title = "Transport for London") +
scale_color_viridis_c()
p1 + p2
bb_sf <- getbb(place_name = "greater london", format_out = "sf_polygon")
osm_bike_sf <- opq(bbox = bb_sf) %>%
add_osm_feature(key = 'amenity', value = 'bicycle_rental') %>%
osmdata_sf() %>%
trim_osmdata(bb_poly = bb_sf)
osm_bike_sf <- osm_bike_sf$osm_points
osm_bike_sf <- osm_bike_sf %>%
filter(brand == "Santander Cycles")
tfl_bike_sf <- fromJSON(readLines("https://api.tfl.gov.uk/bikepoint"))
tfl_bike_sf <- tfl_bike_sf %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326)
ggplot() +
geom_sf(data = osm_bike_sf) +
geom_sf(data = tfl_bike_sf, col = "red", alpha = 0.4)
bb_sf <- getbb(place_name = "greater london", format_out = "sf_polygon")
osm_bike_sf <- opq(bbox = bb_sf) %>%
add_osm_feature(key = 'amenity', value = 'bicycle_rental') %>%
osmdata_sf() %>%
trim_osmdata(bb_poly = bb_sf)
osm_bike_sf <- osm_bike_sf$osm_points
osm_bike_sf <- osm_bike_sf %>%
filter(brand == "Santander Cycles")
tfl_bike_sf <- jsonlite::fromJSON(readLines("https://api.tfl.gov.uk/bikepoint"))
tfl_bike_sf <- tfl_bike_sf %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326)
ggplot() +
geom_sf(data = osm_bike_sf) +
geom_sf(data = tfl_bike_sf, col = "red", alpha = 0.4)
?fromJSON
