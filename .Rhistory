st_as_sf(coords = c(x = "Longitude", y = "Latitude"), crs = 4326) %>%
st_transform(27700) %>%
st_intersection(bb_sf)
# Create buffers to define 'in and around'.
osm_buff_sf <- st_buffer(osm_north_sf, dist = 50)
tfl_buff_sf <- st_buffer(tfl_north_sf, dist = 50)
# Aggregate to each station.
osm_north_sf <- osm_buff_sf %>%
mutate(crimes = lengths(st_intersects(osm_buff_sf, btp_sf)))
tfl_north_sf <- tfl_buff_sf %>%
mutate(crimes = lengths(st_intersects(tfl_buff_sf, btp_sf)))
# Map out difference.
ggplot(data = osm_north_sf) +
geom_sf(mapping = aes(size = crimes))
# Map out difference.
ggplot(data = osm_north_sf) +
geom_sf(mapping = aes(size = crimes, colour = crimes))
ggplot(data = tfl_north_sf) +
geom_sf(mapping = aes(size = crimes, colour = crimes))
install.packages("patchwork")
library(patchwork)
p1 <- ggplot(data = osm_north_sf) +
geom_sf(mapping = aes(size = crimes, colour = crimes))
p2 <- ggplot(data = tfl_north_sf) +
geom_sf(mapping = aes(size = crimes, colour = crimes))
p1 + p2
# Map out difference.
p1 <- ggplot(data = osm_north_sf) +
geom_sf(mapping = aes(size = crimes, colour = crimes)) +
labs(title = "Open Street Map")
p2 <- ggplot(data = tfl_north_sf) +
geom_sf(mapping = aes(size = crimes, colour = crimes)) +
labs(title = "Transport for London")
p1 + p2
# Map out difference.
p1 <- ggplot(data = osm_north_sf) +
geom_sf(mapping = aes(colour = crimes)) +
labs(title = "Open Street Map")
p2 <- ggplot(data = tfl_north_sf) +
geom_sf(mapping = aes(colour = crimes)) +
labs(title = "Transport for London")
p1 + p2
# Map out difference.
p1 <- ggplot(data = osm_north_sf) +
geom_sf(mapping = aes(colour = crimes), size = 3) +
labs(title = "Open Street Map")
p2 <- ggplot(data = tfl_north_sf) +
geom_sf(mapping = aes(colour = crimes)) +
labs(title = "Transport for London")
p1 + p2
p2 <- ggplot(data = tfl_north_sf) +
geom_sf(mapping = aes(colour = crimes), size = 3) +
labs(title = "Transport for London")
p1 + p2
# Map out difference.
p1 <- ggplot(data = osm_north_sf) +
geom_sf(mapping = aes(colour = crimes), size = 3) +
labs(title = "Open Street Map") +
scale_fill_viridis_c()
p2 <- ggplot(data = tfl_north_sf) +
geom_sf(mapping = aes(colour = crimes), size = 3) +
labs(title = "Transport for London") +
scale_fill_viridis_c()
p1 + p2
# Map out difference.
p1 <- ggplot(data = osm_north_sf) +
geom_sf(mapping = aes(colour = crimes), size = 3) +
labs(title = "Open Street Map") +
scale_fill_viridis_c()
p2 <- ggplot(data = tfl_north_sf) +
geom_sf(mapping = aes(colour = crimes), size = 3) +
labs(title = "Transport for London") +
scale_fill_viridis_c()
p1 + p2
p1 <- ggplot(data = osm_north_sf) +
geom_sf(mapping = aes(colour = crimes), size = 3) +
labs(title = "Open Street Map") +
scale_colour_viridis_c()
p2 <- ggplot(data = tfl_north_sf) +
geom_sf(mapping = aes(colour = crimes), size = 3) +
labs(title = "Transport for London") +
scale_colour_viridis_c()
p1 + p2
p1 + p2
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(dplyr)
library(tidyr)
library(jsonlite)
bb_sf <- getbb(place_name = "greater london", format_out = "sf_polygon")
osm_bike_sf <- opq(bbox = bb_sf) %>%                                  # select bounding box.
add_osm_feature(key = 'amenity', value = 'bicycle_rental') %>%      # select keys and values.
osmdata_sf() %>%                                                    # specify class (sf or sp).
trim_osmdata(bb_poly = bb_sf)                                       # trim by the study region.
osm_bike_sf
osm_bike_sf <- osm_bike_sf$osm_points # extract point only
osm_bike_sf <- osm_bike_sf %>%
filter(brand == "Santander Cycles")
# TfL API
tfl_bike_sf <- api_call <- fromJSON(readLines("https://api.tfl.gov.uk/bikepoint"))
# Make spatial.
tfl_bike_sf <- tfl_bike_sf %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326)
# Plot comparison.
ggplot() +
geom_sf(data = bb_sf) +
geom_sf(data = osm_bike_sf) +
geom_sf(data = tfl_bike_sf, col = "red", alpha = 0.3)
temp <- fromJSON(readLines("https://api.tfl.gov.uk/line/northern/stoppoints"))
View(temp)
?readLines
api_call <- fromJSON(readLines("https://api.tfl.gov.uk/line/northern/stoppoints"))
View(api_call)
# Extract bus stop names and the lat-long coordinates, transform to BNG.
tfl_north_sf <- api_call %>%
select(name, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
# Extract bus stop names and the lat-long coordinates, transform to BNG.
tfl_north_sf <- api_call %>%
select(commonname, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
# Extract bus stop names and the lat-long coordinates, transform to BNG.
tfl_north_sf <- api_call %>%
select(commonName, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
View(tfl_north_sf)
View(api_call[[14]][[1]])
View(api_call[[15]][[1]])
library(jsonlite)
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(dplyr)
library(tidyr)
library(purrr)
library(patchwork)
# OSM query ==============================================================================================
# All queries begin with a bounding box specification i.e. the study region.
# This can be obtained manually, which requires some existing knowledge about
# an area using the latitude and longitude coordinates, but it is generally
# easier to use a search term. For instance
bb_sf <- getbb(place_name = "greater london united kingdom", format_out = "sf_polygon")
osm_stat_sf <- opq(bbox = bb_sf) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf() %>%                                                 # specify class (sf or sp)
trim_osmdata(bb_poly = bb_sf)                                    # trim by bounding box
# View contents.
osm_stat_sf
# Extract points only.
osm_stat_sf <- osm_stat_sf$osm_points
# Check the network tags.
table(osm_stat_sf$network)
# Filter Northern line only/
osm_north_sf <- osm_stat_sf %>%
filter(line == "Northern")
osm_north_sf <- st_transform(osm_north_sf, 27700)
bb_sf      <- st_transform(bb_sf, 27700)
ggplot() +
geom_sf(data = bb_sf) +
geom_sf(data = osm_north_sf, size = 0.8)
# TfL scrape ==============================================================================================
# Scape northern line locations from TfL. Warning is fine.
api_call <- fromJSON(readLines("https://api.tfl.gov.uk/line/northern/stoppoints"))
# Extract bus stop names and the lat-long coordinates, transform to BNG.
tfl_north_sf <- api_call %>%
select(commonName, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
# Plot difference.
ggplot() +
geom_sf(data = osm_north_sf) +
geom_sf(data = tfl_north_sf, color = "red", alpha = 0.5)
# Assessing the impact in terms of crime. BTP data in January 2020.
btp_df <- read_csv("data/2020-01-btp-street.csv")
# Make spatial.
btp_sf <- btp_df %>%
drop_na(Longitude, Latitude) %>%
st_as_sf(coords = c(x = "Longitude", y = "Latitude"), crs = 4326) %>%
st_transform(27700) %>%
st_intersection(bb_sf)
# Create buffers to define 'in and around'.
osm_buff_sf <- st_buffer(osm_north_sf, dist = 50)
tfl_buff_sf <- st_buffer(tfl_north_sf, dist = 50)
# Aggregate to each station.
osm_north_sf <- osm_buff_sf %>%
mutate(crimes = lengths(st_intersects(osm_buff_sf, btp_sf)))
tfl_north_sf <- tfl_buff_sf %>%
mutate(crimes = lengths(st_intersects(tfl_buff_sf, btp_sf)))
# Map out difference.
p1 <- ggplot(data = osm_north_sf) +
geom_sf(mapping = aes(colour = crimes), size = 3) +
labs(title = "Open Street Map") +
scale_colour_viridis_c()
p2 <- ggplot(data = tfl_north_sf) +
geom_sf(mapping = aes(colour = crimes), size = 3) +
labs(title = "Transport for London") +
scale_colour_viridis_c()
p1 + p2
class(api_call)
lapply(api_call, class)
tfl_north_sf <- api_call %>%
select(commonName, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
# Chunk 1: setup
knitr::opts_chunk$set(echo = T, message = F, warning = F)
library(jsonlite)
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(dplyr)
library(tidyr)
# Chunk 2
library(jsonlite)
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(dplyr)
library(tidyr)
library(purrr)
library(patchwork)
# Chunk 3: tfl
knitr::include_graphics("img/tfl_screenshot.png")
api_call <- fromJSON(readLines("https://api.tfl.gov.uk/line/northern/stoppoints"))
tfl_north_sf <- api_call %>%
select(commonName, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
ggplot(tfl_north_sf) +
geom_sf()
bb_sf <- getbb(place_name = "greater london united kingdom", format_out = "sf_polygon")
ggplot(data = bb_sf) +
geom_sf()
bikes_sf <- opq(bbox = bb_sf) %>%                                 # select bounding box
add_osm_feature(key = 'amenity', value = 'bicycle_parking') %>% # select features
osmdata_sf() %>%                                                # specify class
trim_osmdata(bb_poly = bb_sf)                                   # trim to region
bikes_sf
library(jsonlite)
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(dplyr)
library(tidyr)
library(purrr)
library(patchwork)
# OSM query ==============================================================================================
# All queries begin with a bounding box specification i.e. the study region.
# This can be obtained manually, which requires some existing knowledge about
# an area using the latitude and longitude coordinates, but it is generally
# easier to use a search term. For instance
bb_sf <- getbb(place_name = "greater london united kingdom", format_out = "sf_polygon")
osm_stat_sf <- opq(bbox = bb_sf) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf() %>%                                                 # specify class (sf or sp)
trim_osmdata(bb_poly = bb_sf)                                    # trim by bounding box
# View contents.
osm_stat_sf
# Extract points only.
osm_stat_sf <- osm_stat_sf$osm_points
osm_stat_sf <- opq(bbox = bb_sf) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf() %>%                                                 # specify class (sf or sp)
trim_osmdata(bb_poly = bb_sf)                                    # trim by bounding box
# View contents.
osm_stat_sf
# Extract points only.
temp <- osm_stat_sf$osm_polygons
View(temp)
names(temp)
table(temp$train)
table(temp$public_transport)
table(temp$network)
filter(temp, network == "London Underground")
# Chunk 1: setup
knitr::opts_chunk$set(echo = T, message = F, warning = F)
library(jsonlite)
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(dplyr)
library(tidyr)
# Chunk 2
library(jsonlite)
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(dplyr)
library(tidyr)
library(purrr)
library(patchwork)
# Chunk 3: tfl
knitr::include_graphics("img/tfl_screenshot.png")
# Chunk 4: getapi
api_call <- fromJSON(readLines("https://api.tfl.gov.uk/line/northern/stoppoints"))
# Chunk 5: apispatial
tfl_north_sf <- api_call %>%
select(commonName, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
# Chunk 6: apispatial
ggplot(tfl_north_sf) +
geom_sf()
# Chunk 7
bb_sf <- getbb(place_name = "greater london united kingdom", format_out = "sf_polygon")
# Chunk 8
ggplot(data = bb_sf) +
geom_sf()
# Chunk 9
osm_stat_sf <- opq(bbox = bb_sf) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf() %>%                                                 # specify class (sf or sp)
trim_osmdata(bb_poly = bb_sf)                                    # trim by bounding box
# Chunk 10
osm_stat_sf
# Chunk 11
bikes_points_sf <- bikes_sf$osm_points
osm_stat_sf <- osm_stat_sf$osm_points
ggplot() +
geom_sf(data = bb_sf) +
geom_sf(data = osm_stat_sf, size = 0.3)
table(osm_stat_sf$network)
table(osm_stat_sf$line)
?table
table(osm_stat_sf$network, osm_stat_sf$line)
table(osm_stat_sf$network, osm_stat_sf$line)
osm_stat_sf %>%
group_ny(network, line) %>%
tally()
osm_stat_sf %>%
group_by(network, line) %>%
tally()
osm_stat_sf %>%
group_by(network, line) %>%
summarise(n = n())
osm_stat_sf %>%
as_tibble() %>%
group_by(network, line) %>%
tally()
m <- osm_stat_sf %>%
as_tibble() %>%
group_by(network, line) %>%
tally()
View(m)
sum_df <- osm_stat_sf %>%
as_tibble() %>%
group_by(network, line) %>%
tally() %>%
View()
ggplot() +
geom_sf(data = tfl_north_sf) +
geom_sf(data = osm_north_sf, color = "red", alpha = 0.5)
osm_north_sf <- osm_stat_sf %>%
filter(line == "Northern")
ggplot() +
geom_sf(data = tfl_north_sf) +
geom_sf(data = osm_north_sf, color = "red", alpha = 0.5)
p1 <- ggplot(data = osm_north_sf) +
geom_sf(mapping = aes(colour = crimes), size = 3) +
labs(title = "Open Street Map") +
scale_colour_viridis_c()
p2 <- ggplot(data = tfl_north_sf) +
geom_sf(mapping = aes(colour = crimes), size = 3) +
labs(title = "Transport for London") +
scale_colour_viridis_c()
p1 + p2
# Create buffers to define 'in and around'.
osm_buff_sf <- st_buffer(osm_north_sf, dist = 50)
tfl_buff_sf <- st_buffer(tfl_north_sf, dist = 50)
# Create variable 'crimes' which contains counts of the number of crimes falling within each buffer.
osm_north_sf <- osm_buff_sf %>%
mutate(crimes = lengths(st_intersects(osm_buff_sf, btp_sf)))
tfl_north_sf <- tfl_buff_sf %>%
mutate(crimes = lengths(st_intersects(tfl_buff_sf, btp_sf)))
btp_df <- read_csv("data/2020-01-btp-street.csv")
btp_sf <- btp_df %>%
drop_na(Longitude, Latitude) %>%
st_as_sf(coords = c(x = "Longitude", y = "Latitude"), crs = 4326) %>%
st_transform(27700) %>%
st_intersection(bb_sf)
tfl_north_sf
osm_north_sf
# First, project the study region boundaries.
bb_sf <- st_transform(bb_sf, 27700)
# Then, make the police data spatial, and clip.
btp_sf <- btp_df %>%
drop_na(Longitude, Latitude) %>%
st_as_sf(coords = c(x = "Longitude", y = "Latitude"), crs = 4326) %>%
st_transform(27700) %>%
st_intersection(bb_sf)
# Create buffers to define 'in and around'.
osm_buff_sf <- st_buffer(osm_north_sf, dist = 50)
tfl_buff_sf <- st_buffer(tfl_north_sf, dist = 50)
# Create variable 'crimes' which contains counts of the number of crimes falling within each buffer.
osm_north_sf <- osm_buff_sf %>%
mutate(crimes = lengths(st_intersects(osm_buff_sf, btp_sf)))
tfl_north_sf <- tfl_buff_sf %>%
mutate(crimes = lengths(st_intersects(tfl_buff_sf, btp_sf)))
# Chunk 1: setup
knitr::opts_chunk$set(echo = T, message = F, warning = F)
library(jsonlite)
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(dplyr)
library(tidyr)
library(patchwork)
# Chunk 2
library(jsonlite)
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(dplyr)
library(tidyr)
library(purrr)
library(patchwork)
# Chunk 3: tfl
knitr::include_graphics("img/tfl_screenshot.png")
# Chunk 4: getapi
api_call <- fromJSON(readLines("https://api.tfl.gov.uk/line/northern/stoppoints"))
# Chunk 5: apispatial
tfl_north_sf <- api_call %>%
select(commonName, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
# Chunk 6: apispatial
ggplot(tfl_north_sf) +
geom_sf()
# Chunk 7
bb_sf <- getbb(place_name = "greater london united kingdom", format_out = "sf_polygon")
# Chunk 8
ggplot(data = bb_sf) +
geom_sf()
# Chunk 9
osm_stat_sf <- opq(bbox = bb_sf) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf() %>%                                                 # specify class (sf or sp)
trim_osmdata(bb_poly = bb_sf)                                    # trim by bounding box
# Chunk 10
osm_stat_sf
# Chunk 11
osm_stat_sf <- osm_stat_sf$osm_points
# Chunk 13
osm_north_sf <- osm_stat_sf %>%
filter(line == "Northern")
# Chunk 14
ggplot() +
geom_sf(data = tfl_north_sf) +
geom_sf(data = osm_north_sf, color = "red", alpha = 0.5)
# Chunk 15
btp_df <- read_csv("data/2020-01-btp-street.csv")
# Chunk 16
# First, project the study region boundaries.
bb_sf <- st_transform(bb_sf, 27700)
# Then, make the police data spatial, and clip.
btp_sf <- btp_df %>%
drop_na(Longitude, Latitude) %>%
st_as_sf(coords = c(x = "Longitude", y = "Latitude"), crs = 4326) %>%
st_transform(27700) %>%
st_intersection(bb_sf)
# Create buffers to define 'in and around'.
osm_buff_sf <- st_buffer(osm_north_sf, dist = 50)
tfl_buff_sf <- st_buffer(tfl_north_sf, dist = 50)
# Create variable 'crimes' which contains counts of the number of crimes falling within each buffer.
osm_north_sf <- osm_buff_sf %>%
mutate(crimes = lengths(st_intersects(osm_buff_sf, btp_sf)))
tfl_north_sf <- tfl_buff_sf %>%
mutate(crimes = lengths(st_intersects(tfl_buff_sf, btp_sf)))
osm_buff_sf
osm_north_sf
# Assign the same CRS.
osm_north_sf <- st_transform(osm_north_sf, 27700)
tfl_north_sf <- st_transform(tfl_north_sf, 27700)
# Create buffers to define 'in and around'.
osm_buff_sf <- st_buffer(osm_north_sf, dist = 50)
tfl_buff_sf <- st_buffer(tfl_north_sf, dist = 50)
# Create variable 'crimes' which contains counts of the number of crimes falling within each buffer.
osm_north_sf <- osm_buff_sf %>%
mutate(crimes = lengths(st_intersects(osm_buff_sf, btp_sf)))
tfl_north_sf <- tfl_buff_sf %>%
mutate(crimes = lengths(st_intersects(tfl_buff_sf, btp_sf)))
p1 <- ggplot(data = osm_north_sf) +
geom_sf(mapping = aes(colour = crimes), size = 3) +
labs(title = "Open Street Map") +
scale_colour_viridis_c()
p2 <- ggplot(data = tfl_north_sf) +
geom_sf(mapping = aes(colour = crimes), size = 3) +
labs(title = "Transport for London") +
scale_colour_viridis_c()
p1 + p2
p1 <- ggplot(data = osm_north_sf) +
geom_sf(mapping = aes(colour = crimes), size = 2) +
labs(title = "Open Street Map") +
scale_colour_viridis_c()
p2 <- ggplot(data = tfl_north_sf) +
geom_sf(mapping = aes(colour = crimes), size = 2) +
labs(title = "Transport for London") +
scale_colour_viridis_c()
p1 + p2
