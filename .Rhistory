lapply(api_call, class)
# Chunk 1: setup
knitr::opts_chunk$set(echo = T, message = F, warning = F)
library(jsonlite)
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(tidyr)
library(patchwork)
library(dplyr)
# Chunk 2: crimeload1
library(readr)
btp_df <- read_csv("data/2020-01-btp-street.csv")
# Chunk 4: tfl
knitr::include_graphics("img/tfl_screenshot.png")
# Chunk 5: getapi
library(jsonlite)
api_call <- fromJSON(readLines("https://api.tfl.gov.uk/line/northern/stoppoints"))
# Chunk 6: bb
library(osmdata)
bb_sf <- getbb(place_name = "greater london united kingdom", format_out = "sf_polygon")
# Chunk 7: bbmap
library(ggplot2)
library(sf)
ggplot(data = bb_sf) +
geom_sf()
# Chunk 8: opq
osm_stat_sf <- opq(bbox = bb_sf) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf() %>%                                                 # specify class
trim_osmdata(bb_poly = bb_sf)                                    # trim by bounding box
# Chunk 9: printstations
osm_stat_sf
# Chunk 10: stationpoints
osm_stat_sf <- osm_stat_sf$osm_points
osm_stat_sf <- opq(bbox = bb_sf) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf() %>%                                                 # specify class
trim_osmdata(bb_poly = bb_sf)                                    # trim by bounding box
osm_stat_sf
osm_stat_sf <- osm_stat_sf$osm_points
library(dplyr)
osm_stat_sf %>% group_by(fare_zone) %>% count() %>% st_drop_geometry() %>% arrange(-n)
View(osm_bike_sf)
view(osm_stat_sf)
View(osm_stat_sf)
tfl_north_sf <- api_call %>%
select(commonName, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
ggplot(tfl_north_sf) +
geom_sf()
ggplot() +
geom_sf(data = tfl_north_sf) +
geom_sf(data = osm_north_sf, color = "red", alpha = 0.5)
View(osm_north_sf)
library(dplyr)
osm_north_sf <- osm_stat_sf %>%
filter(grepl("Northern", line))
clas(osm_north_sf)
class(osm_north_sf)
View(osm_north_sf)
library(readr)
btp_df <- read_csv("data/2020-01-btp-street.csv")
library(jsonlite)
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(tidyr)
library(patchwork)
library(dplyr)
library(readr)
btp_df <- read_csv("data/2020-01-btp-street.csv")
btp_df <- read_csv("https://raw.githubusercontent.com/anonymous/osm_crim/master/data/
2019-01-greater-manchester-street.csv")
library(jsonlite)
api_call <- fromJSON(readLines("https://api.tfl.gov.uk/line/northern/stoppoints"))
library(osmdata)
bb_sf <- getbb(place_name = "greater london united kingdom", format_out = "sf_polygon")
library(ggplot2)
library(sf)
ggplot(data = bb_sf) +
geom_sf()
osm_stat_sf <- opq(bbox = bb_sf) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf() %>%                                                 # specify class
trim_osmdata(bb_poly = bb_sf)                                    # trim by bounding box
osm_stat_sf
osm_stat_sf <- osm_stat_sf$osm_points
unique(osm_stat_sf$line)
library(dplyr)
osm_north_sf <- osm_stat_sf %>%
filter(grepl("Northern", line))
library(tidyr)
library(patchwork)
tfl_north_sf <- api_call %>%
select(commonName, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
ggplot(tfl_north_sf) +
geom_sf()
ggplot() +
geom_sf(data = tfl_north_sf) +
geom_sf(data = osm_north_sf, color = "red", alpha = 0.5)
# First, project the study region boundaries.
bb_sf <- st_transform(bb_sf, 27700)
# Then, make the police data spatial, and clip.
btp_sf <- btp_df %>%
drop_na(Longitude, Latitude) %>%
st_as_sf(coords = c(x = "Longitude", y = "Latitude"), crs = 4326) %>%
st_transform(27700) %>%
st_intersection(bb_sf)
View(btp_df)
btp_df <- read_csv("https://raw.githubusercontent.com/anonymous/osm_crim/master/data/
2019-01-greater-manchester-street.csv")
btp_df <- read_csv("https://raw.githubusercontent.com/langtonhugh/osm_crim/master/data/
2019-01-greater-manchester-street.csv")
btp_df <- read_csv("https://raw.githubusercontent.com/langtonhugh/osm_crim/master/data/2019-01-greater-manchester-street.csv")
tfl_north_sf <- api_call %>%
select(commonName, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
ggplot(tfl_north_sf) +
geom_sf()
library(jsonlite)
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(dplyr)
library(tidyr)
library(purrr)
library(patchwork)
bb_sf <- getbb(place_name = "greater london united kingdom", format_out = "sf_polygon")
osm_stat_sf <- opq(bbox = bb_sf) %>%                               # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>% # select features
osmdata_sf() %>%                                                 # specify class (sf or sp)
trim_osmdata(bb_poly = bb_sf)                                    # trim by bounding box
# View contents.
osm_stat_sf
# Extract points only.
temp <- osm_stat_sf$osm_polygons
osm_stat_sf <- osm_stat_sf$osm_points
bb_sf <- getbb(place_name = "greater london united kingdom", format_out = "sf_polygon")
bb_sf <- getbb(place_name = "greater london", format_out = "sf_polygon")
# adding united kingodm didn't work?
bb_sf <- getbb(place_name = "greater london united kingdom", format_out = "sf_polygon")
# adding united kingodm didn't work?
bb_sf <- getbb(place_name = "greater manchester united kingdom", format_out = "sf_polygon")
# adding united kingodm didn't work?
bb_sf <- getbb(place_name = "london united kingdom", format_out = "sf_polygon")
plot(st_st_agr(bb_sf))
plot(bb_sf)
# adding united kingodm didn't work?
bb_sf <- getbb(place_name = "greater london united kingdom", format_out = "sf_polygon")
# adding united kingodm didn't work?
bb_sf <- getbb(place_name = "greater manchester united kingdom", format_out = "sf_polygon")
plot(bb_sf)
# adding united kingodm didn't work?
bb_sf <- getbb(place_name = "london administrative united kingdom", format_out = "sf_polygon")
# adding united kingodm didn't work?
bb_sf <- getbb(place_name = "london united kingdom", format_out = "sf_polygon")
plot(bb_sf)
# adding united kingodm didn't work?
bb_sf <- getbb(place_name = "greater london united kingdom", format_out = "sf_polygon")
plot(bb_sf)
# adding united kingodm didn't work?
bb_sf <- getbb(place_name = "London (65606) united kingdom", format_out = "sf_polygon")
# adding united kingodm didn't work?
bb_sf <- getbb(place_name = "65606", format_out = "sf_polygon")
# adding united kingodm didn't work?
bb_sf <- getbb(place_name = "London (65606) united kingdom", format_out = "sf_polygon")
# adding united kingodm didn't work?
bb_sf <- getbb(place_name = "65606", format_out = "sf_polygon")
plot(bb_sf)
library(jsonlite)
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(dplyr)
library(tidyr)
library(purrr)
library(patchwork)
# OSM query ==============================================================================================
# All queries begin with a bounding box specification i.e. the study region.
# This can be obtained manually, which requires some existing knowledge about
# an area using the latitude and longitude coordinates, but it is generally
# easier to use a search term. For instance
# adding united kingodm didn't work?
bb_sf <- getbb(place_name = "london uk", format_out = "sf_polygon")
plot(bbbb_sf)
plot(bb_sf)
# adding united kingodm didn't work?
bb_sf <- getbb(place_name = "greater london uk", format_out = "sf_polygon")
# adding united kingodm didn't work?
bb_sf <- getbb(place_name = "Greater London, U.K.", format_out = "sf_polygon")
# adding united kingodm didn't work?
bb_sf <- getbb(place_name = "Greater London UK", format_out = "sf_polygon")
library(jsonlite)
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(dplyr)
library(tidyr)
library(purrr)
library(patchwork)
library(stringr)
# OSM query ==============================================================================================
# All queries begin with a bounding box specification i.e. the study region.
# This can be obtained manually, which requires some existing knowledge about
# an area using the latitude and longitude coordinates, but it is generally
# easier to use a search term. For instance
# no longer works.
# bb_sf <- getbb(place_name = "Greater London United Kingdom", format_out = "sf_polygon")
osm_stat_sf <- opq(bbox = c(-0.5103751, 51.2867602, 0.3340155, 51.6918741)) %>% # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>%           # select features
osmdata_sf()                                                               # specify class (sf or sp)
# trim_osmdata(bb_poly = bb_sf)                                           # trim by bounding box
# View contents.
osm_stat_sf
# Extract points only.
temp <- osm_stat_sf$osm_polygons
osm_stat_sf <- osm_stat_sf$osm_points
# Check the network tags.
table(osm_stat_sf$line)
# Filter jubern line only/
osm_jub_sf <- osm_stat_sf %>%
mutate(tube_line = line) %>%
filter(str_detect(tube_line, "Jubilee"))
osm_jub_sf <- st_transform(osm_jub_sf, 27700)
# bb_sf      <- st_transform(bb_sf, 27700)
ggplot() +
# geom_sf(data = bb_sf) +
geom_sf(data = osm_jub_sf, size = 0.8)
# TfL scrape ==============================================================================================
# Scape jubern line locations from TfL. Warning is fine.
api_call <- fromJSON(readLines("https://api.tfl.gov.uk/line/jubilee/stoppoints"))
# Extract bus stop names and the lat-long coordinates, transform to BNG.
tfl_jub_sf <- api_call %>%
select(commonName, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
# Plot difference.
ggplot() +
geom_sf(data = osm_jub_sf) +
geom_sf(data = tfl_jub_sf, color = "red", alpha = 0.5)
# Save before some nerd updates the line like the jubern line did.
temp_osm_jub_sf <- osm_jub_sf %>%
select(name, geometry)
st_write(obj = temp_osm_jub_sf, dsn = "data/jubilee_osm.shp")
st_write(obj = tfl_jub_sf, dsn = "data/jubilee_tfl.shp")
# Assessing the impact in terms of crime. BTP data in January 2020.
btp_df <- read_csv("data/2020-01-btp-street.csv")
# Make spatial.
btp_sf <- btp_df %>%
drop_na(Longitude, Latitude) %>%
st_as_sf(coords = c(x = "Longitude", y = "Latitude"), crs = 4326) %>%
st_transform(27700)
# st_intersection(bb_sf)
# Create buffers to define 'in and around'.
osm_buff_sf <- st_buffer(osm_jub_sf, dist = 50)
tfl_buff_sf <- st_buffer(tfl_jub_sf, dist = 50)
# Aggregate to each station.
osm_jub_sf <- osm_buff_sf %>%
mutate(crimes = lengths(st_intersects(osm_buff_sf, btp_sf)))
tfl_jub_sf <- tfl_buff_sf %>%
mutate(crimes = lengths(st_intersects(tfl_buff_sf, btp_sf)))
# Map out difference.
p1 <- ggplot(data = osm_jub_sf) +
geom_sf(mapping = aes(colour = crimes), size = 3) +
labs(title = "Open Street Map") +
scale_colour_viridis_c()
p2 <- ggplot(data = tfl_jub_sf) +
geom_sf(mapping = aes(colour = crimes), size = 3) +
labs(title = "Transport for London") +
scale_colour_viridis_c()
p1 + p2
sum(osm_jub_sf$crimes)
sum(tfl_jub_sf$crimes)
tfl_jub_df <- tfl_jub_sf %>%
mutate(name = str_remove(commonName, "Underground Station")) %>%
as_tibble()
osm_jub_df <- osm_jub_sf %>%
as_tibble() %>%
select(name)
# Join
temp <- left_join(tfl_jub_df, osm_jub_df, by = "name")
View(temp)
library(jsonlite)
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(dplyr)
library(tidyr)
library(purrr)
library(patchwork)
library(stringr)
# OSM query ==============================================================================================
# All queries begin with a bounding box specification i.e. the study region.
# This can be obtained manually, which requires some existing knowledge about
# an area using the latitude and longitude coordinates, but it is generally
# easier to use a search term. For instance
# no longer works.
# bb_sf <- getbb(place_name = "Greater London United Kingdom", format_out = "sf_polygon")
osm_stat_sf <- opq(bbox = c(-0.5103751, 51.2867602, 0.3340155, 51.6918741)) %>% # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>%           # select features
osmdata_sf()                                                               # specify class (sf or sp)
# trim_osmdata(bb_poly = bb_sf)                                           # trim by bounding box
# View contents.
osm_stat_sf
# Extract points only.
temp <- osm_stat_sf$osm_polygons
osm_stat_sf <- osm_stat_sf$osm_points
# Check the network tags.
table(osm_stat_sf$line)
# Filter jubern line only/
osm_jub_sf <- osm_stat_sf %>%
mutate(tube_line = line) %>%
filter(str_detect(tube_line, "Jubilee"))
osm_jub_sf <- st_transform(osm_jub_sf, 27700)
# bb_sf      <- st_transform(bb_sf, 27700)
ggplot() +
# geom_sf(data = bb_sf) +
geom_sf(data = osm_jub_sf, size = 0.8)
# TfL scrape ==============================================================================================
# Scape jubern line locations from TfL. Warning is fine.
api_call <- fromJSON(readLines("https://api.tfl.gov.uk/line/jubilee/stoppoints"))
# Extract bus stop names and the lat-long coordinates, transform to BNG.
tfl_jub_sf <- api_call %>%
select(commonName, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
# Plot difference.
ggplot() +
geom_sf(data = osm_jub_sf) +
geom_sf(data = tfl_jub_sf, color = "red", alpha = 0.5)
# Save before some nerd updates the line like the jubern line did.
temp_osm_jub_sf <- osm_jub_sf %>%
select(name, geometry)
st_write(obj = temp_osm_jub_sf, dsn = "data/jubilee_osm.shp")
st_write(obj = tfl_jub_sf, dsn = "data/jubilee_tfl.shp")
# Assessing the impact in terms of crime. BTP data in January 2020.
btp_df <- read_csv("data/2020-01-btp-street.csv")
# Make spatial.
btp_sf <- btp_df %>%
drop_na(Longitude, Latitude) %>%
st_as_sf(coords = c(x = "Longitude", y = "Latitude"), crs = 4326) %>%
st_transform(27700)
# st_intersection(bb_sf)
# Create buffers to define 'in and around'.
osm_buff_sf <- st_buffer(osm_jub_sf, dist = 50)
tfl_buff_sf <- st_buffer(tfl_jub_sf, dist = 50)
# Aggregate to each station.
osm_jub_sf <- osm_buff_sf %>%
mutate(crimes = lengths(st_intersects(osm_buff_sf, btp_sf)))
tfl_jub_sf <- tfl_buff_sf %>%
mutate(crimes = lengths(st_intersects(tfl_buff_sf, btp_sf)))
# Map out difference.
p1 <- ggplot(data = osm_jub_sf) +
geom_sf(mapping = aes(colour = crimes), size = 3) +
labs(title = "Open Street Map") +
scale_colour_viridis_c()
p2 <- ggplot(data = tfl_jub_sf) +
geom_sf(mapping = aes(colour = crimes), size = 3) +
labs(title = "Transport for London") +
scale_colour_viridis_c()
p1 + p2
?scale_colour_viridis_c
p2 <- ggplot(data = tfl_jub_sf) +
geom_sf(mapping = aes(colour = crimes), size = 3) +
labs(title = "Transport for London") +
scale_colour_viridis_c(lim = c(0,50))
ggplot(data = tfl_jub_sf) +
geom_sf(mapping = aes(colour = crimes), size = 3) +
labs(title = "Transport for London") +
scale_colour_viridis_c(lim = c(0,50))
p2 <- ggplot(data = tfl_jub_sf) +
geom_sf(mapping = aes(colour = crimes), size = 3) +
labs(title = "Transport for London") +
scale_colour_viridis_c(lim = c(0,10))
p1 + p2
# Map out difference.
p1 <- ggplot(data = osm_jub_sf) +
geom_sf(mapping = aes(colour = crimes), size = 3) +
labs(title = "Open Street Map") +
scale_colour_viridis_c(lim = c(0,40))
p2 <- ggplot(data = tfl_jub_sf) +
geom_sf(mapping = aes(colour = crimes), size = 3) +
labs(title = "Transport for London") +
scale_colour_viridis_c(lim = c(0,40))
p1 + p2
# Map out difference.
p1 <- ggplot(data = osm_jub_sf) +
geom_sf(mapping = aes(colour = crimes), size = 3) +
labs(title = "Open Street Map") +
scale_colour_viridis_c(lim = c(0,45))
p2 <- ggplot(data = tfl_jub_sf) +
geom_sf(mapping = aes(colour = crimes), size = 3) +
labs(title = "Transport for London") +
scale_colour_viridis_c(lim = c(0,45))
p1 + p2
# Map out difference.
p1 <- ggplot(data = osm_jub_sf) +
geom_sf(mapping = aes(colour = crimes), size = 3) +
labs(title = "Open Street Map") +
scale_colour_viridis_c(lim = c(0,42))
p2 <- ggplot(data = tfl_jub_sf) +
geom_sf(mapping = aes(colour = crimes), size = 3) +
labs(title = "Transport for London") +
scale_colour_viridis_c(lim = c(0,42))
p1 + p2
p1 +
p2
p1 / p2
library(jsonlite)
library(osmdata)
library(ggplot2)
library(sf)
library(readr)
library(dplyr)
library(tidyr)
library(purrr)
library(patchwork)
library(stringr)
# OSM query ==============================================================================================
# All queries begin with a bounding box specification i.e. the study region.
# This can be obtained manually, which requires some existing knowledge about
# an area using the latitude and longitude coordinates, but it is generally
# easier to use a search term. For instance
# no longer works.
# bb_sf <- getbb(place_name = "Greater London United Kingdom", format_out = "sf_polygon")
osm_stat_sf <- opq(bbox = c(-0.5103751, 51.2867602, 0.3340155, 51.6918741)) %>% # select bounding box
add_osm_feature(key = 'public_transport', value = 'station') %>%           # select features
osmdata_sf()                                                               # specify class (sf or sp)
# trim_osmdata(bb_poly = bb_sf)                                           # trim by bounding box
# View contents.
osm_stat_sf
# Extract points only.
temp <- osm_stat_sf$osm_polygons
osm_stat_sf <- osm_stat_sf$osm_points
# Check the network tags.
table(osm_stat_sf$line)
# Filter jubern line only/
osm_jub_sf <- osm_stat_sf %>%
mutate(tube_line = line) %>%
filter(str_detect(tube_line, "Jubilee"))
osm_jub_sf <- st_transform(osm_jub_sf, 27700)
# bb_sf      <- st_transform(bb_sf, 27700)
ggplot() +
# geom_sf(data = bb_sf) +
geom_sf(data = osm_jub_sf, size = 0.8)
# TfL scrape ==============================================================================================
# Scape jubern line locations from TfL. Warning is fine.
api_call <- fromJSON(readLines("https://api.tfl.gov.uk/line/jubilee/stoppoints"))
# Extract bus stop names and the lat-long coordinates, transform to BNG.
tfl_jub_sf <- api_call %>%
select(commonName, lat, lon) %>%
st_as_sf(coords = c(x = "lon", y = "lat"), crs = 4326) %>%
st_transform(27700)
# Plot difference.
ggplot() +
geom_sf(data = osm_jub_sf) +
geom_sf(data = tfl_jub_sf, color = "red", alpha = 0.5)
# Save before some nerd updates the line like the jubern line did.
temp_osm_jub_sf <- osm_jub_sf %>%
select(name, geometry)
st_write(obj = temp_osm_jub_sf, dsn = "data/jubilee_osm.shp")
st_write(obj = tfl_jub_sf, dsn = "data/jubilee_tfl.shp")
# Assessing the impact in terms of crime. BTP data in January 2020.
btp_df <- read_csv("data/2020-01-btp-street.csv")
# Make spatial.
btp_sf <- btp_df %>%
drop_na(Longitude, Latitude) %>%
st_as_sf(coords = c(x = "Longitude", y = "Latitude"), crs = 4326) %>%
st_transform(27700)
# st_intersection(bb_sf)
# Create buffers to define 'in and around'.
osm_buff_sf <- st_buffer(osm_jub_sf, dist = 50)
tfl_buff_sf <- st_buffer(tfl_jub_sf, dist = 50)
# Aggregate to each station.
osm_jub_sf <- osm_buff_sf %>%
mutate(crimes = lengths(st_intersects(osm_buff_sf, btp_sf)))
tfl_jub_sf <- tfl_buff_sf %>%
mutate(crimes = lengths(st_intersects(tfl_buff_sf, btp_sf)))
# Map out difference.
p1 <- ggplot(data = osm_jub_sf) +
geom_sf(mapping = aes(colour = crimes), size = 3) +
labs(title = "Open Street Map") +
scale_colour_viridis_c(lim = c(0,42))
p2 <- ggplot(data = tfl_jub_sf) +
geom_sf(mapping = aes(colour = crimes), size = 3) +
labs(title = "Transport for London") +
scale_colour_viridis_c(lim = c(0,42))
p1 / p2
sum(osm_jub_sf$crimes) # 168
sum(tfl_jub_sf$crimes) # 136
# Check names
tfl_jub_df <- tfl_jub_sf %>%
mutate(name = str_remove(commonName, "Underground Station")) %>%
as_tibble()
osm_jub_df <- osm_jub_sf %>%
as_tibble() %>%
select(name)
# Join to demo that names match perfectly.
names_df <- left_join(tfl_jub_df, osm_jub_df, by = "name")
View()
View(names_df)
